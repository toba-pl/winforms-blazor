"use strict";var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)Object.hasOwnProperty.call(mod,k)&&(result[k]=mod[k]);return result.default=mod,result};Object.defineProperty(exports,"__esModule",{value:!0});const antlr4ts_1=require(350),tree_1=require(375),constant_1=require(167),expression_1=require(179),expressionType_1=require(192),generated_1=require(208),ep=__importStar(require(207)),parseErrorListener_1=require(210),functionUtils_1=require(196);class ExpressionParser{constructor(lookup){this.ExpressionTransformer=class extends tree_1.AbstractParseTreeVisitor{constructor(lookup){super(),this.escapeRegex=new RegExp(/\\[^\r\n]?/g),this._lookupFunction=void 0,this.transform=(context=>this.visit(context)),this.visitParenthesisExp=(context=>this.visit(context.expression())),this.defaultResult=(()=>new constant_1.Constant("")),this.makeExpression=((functionType,...children)=>{if(!this._lookupFunction(functionType))throw new Error(`${functionType} does not have an evaluator, it's not a built-in function or a custom function.`);return expression_1.Expression.makeExpression(functionType,this._lookupFunction(functionType),...children)}),this._lookupFunction=lookup}visitUnaryOpExp(context){const unaryOperationName=context.getChild(0).text,operand=this.visit(context.expression());return unaryOperationName===expressionType_1.ExpressionType.Subtract||unaryOperationName===expressionType_1.ExpressionType.Add?this.makeExpression(unaryOperationName,new constant_1.Constant(0),operand):this.makeExpression(unaryOperationName,operand)}visitBinaryOpExp(context){const binaryOperationName=context.getChild(1).text,left=this.visit(context.expression(0)),right=this.visit(context.expression(1));return this.makeExpression(binaryOperationName,left,right)}visitTripleOpExp(context){const conditionalExpression=this.visit(context.expression(0)),left=this.visit(context.expression(1)),right=this.visit(context.expression(2));return this.makeExpression(expressionType_1.ExpressionType.If,conditionalExpression,left,right)}visitFuncInvokeExp(context){const parameters=this.processArgsList(context.argsList());let functionName=context.primaryExpression().text;return void 0!==context.NON()&&(functionName+=context.NON().text),this.makeExpression(functionName,...parameters)}visitIdAtom(context){let result;const symbol=context.text;return result="false"===symbol?new constant_1.Constant(!1):"true"===symbol?new constant_1.Constant(!0):"null"===symbol?new constant_1.Constant(null):"undefined"===symbol?new constant_1.Constant(void 0):this.makeExpression(expressionType_1.ExpressionType.Accessor,new constant_1.Constant(symbol))}visitIndexAccessExp(context){const property=this.visit(context.expression()),instance=this.visit(context.primaryExpression());return this.makeExpression(expressionType_1.ExpressionType.Element,instance,property)}visitMemberAccessExp(context){const property=context.IDENTIFIER().text,instance=this.visit(context.primaryExpression());return this.makeExpression(expressionType_1.ExpressionType.Accessor,new constant_1.Constant(property),instance)}visitNumericAtom(context){const numberValue=parseFloat(context.text);if(functionUtils_1.FunctionUtils.isNumber(numberValue))return new constant_1.Constant(numberValue);throw new Error(`${context.text} is not a number.`)}visitArrayCreationExp(context){const parameters=this.processArgsList(context.argsList());return this.makeExpression(expressionType_1.ExpressionType.CreateArray,...parameters)}visitStringAtom(context){let text=context.text;if(text.startsWith("'")&&text.endsWith("'"))text=text.substr(1,text.length-2).replace(/\\'/g,"'");else{if(!text.startsWith('"')||!text.endsWith('"'))throw new Error(`Invalid string ${text}`);text=text.substr(1,text.length-2).replace(/\\"/g,'"')}return new constant_1.Constant(this.evalEscape(text))}visitJsonCreationExp(context){let expr=this.makeExpression(expressionType_1.ExpressionType.Json,new constant_1.Constant("{}"));if(context.keyValuePairList())for(const kvPair of context.keyValuePairList().keyValuePair()){let key="";const keyNode=kvPair.key().children[0];keyNode instanceof tree_1.TerminalNode&&(key=keyNode.symbol.type===ep.ExpressionAntlrParser.IDENTIFIER?keyNode.text:keyNode.text.substring(1,keyNode.text.length-1)),expr=this.makeExpression(expressionType_1.ExpressionType.SetProperty,expr,new constant_1.Constant(key),this.visit(kvPair.expression()))}return expr}visitStringInterpolationAtom(context){const children=[new constant_1.Constant("")];for(const node of context.stringInterpolation().children)if(node instanceof tree_1.TerminalNode)switch(node.symbol.type){case ep.ExpressionAntlrParser.TEMPLATE:{const expressionString=this.trimExpression(node.text);children.push(expression_1.Expression.parse(expressionString,this._lookupFunction));break}case ep.ExpressionAntlrParser.ESCAPE_CHARACTER:children.push(new constant_1.Constant(node.text.replace(/\\`/g,"`").replace(/\\\$/g,"$")))}else children.push(new constant_1.Constant(node.text));return this.makeExpression(expressionType_1.ExpressionType.Concat,...children)}processArgsList(context){const result=[];if(!context)return result;for(const child of context.children)if(child instanceof ep.LambdaContext){const evalParam=this.makeExpression(expressionType_1.ExpressionType.Accessor,new constant_1.Constant(child.IDENTIFIER().text)),evalFun=this.visit(child.expression());result.push(evalParam),result.push(evalFun)}else child instanceof ep.ExpressionContext&&result.push(this.visit(child));return result}trimExpression(expression){let result=expression.trim();return result.startsWith("$")&&(result=result.substr(1)),(result=result.trim()).startsWith("{")&&result.endsWith("}")&&(result=result.substr(1,result.length-2)),result.trim()}evalEscape(text){const validCharactersDict={"\\r":"\r","\\n":"\n","\\t":"\t","\\\\":"\\"};return text.replace(this.escapeRegex,sub=>sub in validCharactersDict?validCharactersDict[sub]:sub)}},this.EvaluatorLookup=lookup||expression_1.Expression.lookup}static antlrParse(expression){if(ExpressionParser.expressionDict.has(expression))return ExpressionParser.expressionDict.get(expression);const inputStream=new antlr4ts_1.ANTLRInputStream(expression),lexer=new generated_1.ExpressionAntlrLexer(inputStream);lexer.removeErrorListeners();const tokenStream=new antlr4ts_1.CommonTokenStream(lexer),parser=new generated_1.ExpressionAntlrParser(tokenStream);let expressionContext;parser.removeErrorListeners(),parser.addErrorListener(parseErrorListener_1.ParseErrorListener.Instance),parser.buildParseTree=!0;const file=parser.file();return void 0!==file&&(expressionContext=file.expression()),ExpressionParser.expressionDict.set(expression,expressionContext),expressionContext}parse(expression){return null==expression||""===expression?new constant_1.Constant(""):new this.ExpressionTransformer(this.EvaluatorLookup).transform(ExpressionParser.antlrParse(expression))}}ExpressionParser.expressionDict=new Map,exports.ExpressionParser=ExpressionParser;

//# sourceMappingURL=data:application/json;base64,