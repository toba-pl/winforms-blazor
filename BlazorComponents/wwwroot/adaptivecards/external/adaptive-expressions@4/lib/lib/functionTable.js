"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const expressionEvaluator_1=require(180),expressionFunctions_1=require(181),functionUtils_1=require(196);exports.FunctionTable=class{constructor(){this.customFunctions=new Map}keys(){return Array.from(expressionFunctions_1.ExpressionFunctions.standardFunctions.keys()).concat(Array.from(this.customFunctions.keys()))[Symbol.iterator]()}values(){return Array.from(expressionFunctions_1.ExpressionFunctions.standardFunctions.values()).concat(Array.from(this.customFunctions.values()))[Symbol.iterator]()}get size(){return expressionFunctions_1.ExpressionFunctions.standardFunctions.size+this.customFunctions.size}get isReadOnly(){return!1}get(key){return expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key)?expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key):this.customFunctions.get(key)?this.customFunctions.get(key):void 0}set(key,value){if(expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key))throw Error("You can't overwrite a built in function.");return this.customFunctions.set(key,value),this}add(param1,param2){1===arguments.length?param1 instanceof Object&&this.set(param1.key,param1.value):"string"==typeof param1&&(param2 instanceof expressionEvaluator_1.ExpressionEvaluator?this.set(param1,param2):this.set(param1,new expressionEvaluator_1.ExpressionEvaluator(param1,functionUtils_1.FunctionUtils.apply(param2))))}clear(){this.customFunctions.clear()}has(key){return expressionFunctions_1.ExpressionFunctions.standardFunctions.has(key)||this.customFunctions.has(key)}delete(key){return this.customFunctions.delete(key)}forEach(_callbackfn,_thisArg){throw Error("forEach function not implemented")}entries(){throw Error("entries function not implemented")}get[Symbol.iterator](){throw Error("Symbol.iterator function not implemented")}get[Symbol.toStringTag](){throw Error("Symbol.toStringTag function not implemented")}};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9uVGFibGUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJleHByZXNzaW9uRXZhbHVhdG9yXzEiLCJyZXF1aXJlIiwiZXhwcmVzc2lvbkZ1bmN0aW9uc18xIiwiZnVuY3Rpb25VdGlsc18xIiwiRnVuY3Rpb25UYWJsZSIsIltvYmplY3QgT2JqZWN0XSIsInRoaXMiLCJjdXN0b21GdW5jdGlvbnMiLCJNYXAiLCJBcnJheSIsImZyb20iLCJFeHByZXNzaW9uRnVuY3Rpb25zIiwic3RhbmRhcmRGdW5jdGlvbnMiLCJrZXlzIiwiY29uY2F0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2YWx1ZXMiLCJzaXplIiwiaXNSZWFkT25seSIsImtleSIsImdldCIsIkVycm9yIiwic2V0IiwicGFyYW0xIiwicGFyYW0yIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiRXhwcmVzc2lvbkV2YWx1YXRvciIsIkZ1bmN0aW9uVXRpbHMiLCJhcHBseSIsImNsZWFyIiwiaGFzIiwiZGVsZXRlIiwiX2NhbGxiYWNrZm4iLCJfdGhpc0FyZyIsInRvU3RyaW5nVGFnIl0sIm1hcHBpbmdzIjoiQUFBQSxhQVFBQSxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxzQkFBd0JDLFFBQVEseUJBQ2hDQyxzQkFBd0JELFFBQVEseUJBQ2hDRSxnQkFBa0JGLFFBQVEsbUJBZ0poQ0gsUUFBUU0sY0E1SVIsTUFDSUMsY0FDSUMsS0FBS0MsZ0JBQWtCLElBQUlDLElBTS9CSCxPQUVJLE9BRDJCSSxNQUFNQyxLQUFLUixzQkFBc0JTLG9CQUFvQkMsa0JBQWtCQyxRQUFRQyxPQUFPTCxNQUFNQyxLQUFLSixLQUFLQyxnQkFBZ0JNLFNBQ3ZIRSxPQUFPQyxZQU1yQ1gsU0FFSSxPQUQ2QkksTUFBTUMsS0FBS1Isc0JBQXNCUyxvQkFBb0JDLGtCQUFrQkssVUFBVUgsT0FBT0wsTUFBTUMsS0FBS0osS0FBS0MsZ0JBQWdCVSxXQUN6SEYsT0FBT0MsWUFNdkNFLFdBQ0ksT0FBT2hCLHNCQUFzQlMsb0JBQW9CQyxrQkFBa0JNLEtBQU9aLEtBQUtDLGdCQUFnQlcsS0FNbkdDLGlCQUNJLE9BQU8sRUFPWGQsSUFBSWUsS0FDQSxPQUFJbEIsc0JBQXNCUyxvQkFBb0JDLGtCQUFrQlMsSUFBSUQsS0FDekRsQixzQkFBc0JTLG9CQUFvQkMsa0JBQWtCUyxJQUFJRCxLQUV2RWQsS0FBS0MsZ0JBQWdCYyxJQUFJRCxLQUNsQmQsS0FBS0MsZ0JBQWdCYyxJQUFJRCxVQURwQyxFQVVKZixJQUFJZSxJQUFLckIsT0FDTCxHQUFJRyxzQkFBc0JTLG9CQUFvQkMsa0JBQWtCUyxJQUFJRCxLQUNoRSxNQUFNRSxNQUFNLDRDQUdoQixPQURBaEIsS0FBS0MsZ0JBQWdCZ0IsSUFBSUgsSUFBS3JCLE9BQ3ZCTyxLQU9YRCxJQUFJbUIsT0FBUUMsUUFDaUIsSUFBckJDLFVBQVVDLE9BQ05ILGtCQUFrQjVCLFFBQ2xCVSxLQUFLaUIsSUFBSUMsT0FBT0osSUFBS0ksT0FBT3pCLE9BSVYsaUJBQVh5QixTQUNIQyxrQkFBa0J6QixzQkFBc0I0QixvQkFDeEN0QixLQUFLaUIsSUFBSUMsT0FBUUMsUUFHakJuQixLQUFLaUIsSUFBSUMsT0FBUSxJQUFJeEIsc0JBQXNCNEIsb0JBQW9CSixPQUFRckIsZ0JBQWdCMEIsY0FBY0MsTUFBTUwsV0FRM0hwQixRQUNJQyxLQUFLQyxnQkFBZ0J3QixRQU96QjFCLElBQUllLEtBQ0EsT0FBT2xCLHNCQUFzQlMsb0JBQW9CQyxrQkFBa0JvQixJQUFJWixNQUFRZCxLQUFLQyxnQkFBZ0J5QixJQUFJWixLQU81R2YsT0FBT2UsS0FDSCxPQUFPZCxLQUFLQyxnQkFBZ0IwQixPQUFPYixLQVN2Q2YsUUFFQTZCLFlBRUFDLFVBQ0ksTUFBTWIsTUFBTSxvQ0FNaEJqQixVQUNJLE1BQU1pQixNQUFNLG9DQU1oQkQsSUFBS04sT0FBT0MsWUFDUixNQUFNTSxNQUFNLDRDQU1oQkQsSUFBS04sT0FBT3FCLGVBQ1IsTUFBTWQsTUFBTSIsImZpbGUiOiIvaG9tZS92c3RzL3dvcmsvMS9zL2xpYnJhcmllcy9hZGFwdGl2ZS1leHByZXNzaW9ucy9saWIvZnVuY3Rpb25UYWJsZS5qcyJ9