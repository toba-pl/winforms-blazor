"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const expression_1=require(179),clause_1=require(215),node_1=require(217),relationshipType_1=require(219),trigger_1=require(220);exports.TriggerTree=class{constructor(){this.optimizers=[],this.comparers={},this.totalTriggers=0,this.root=new node_1.Node(new clause_1.Clause,this)}toString(){return`TriggerTree with ${this.totalTriggers} triggers`}addTrigger(stringOrExpression,action,...quantifiers){const expression="string"==typeof stringOrExpression?expression_1.Expression.parse(stringOrExpression):stringOrExpression,trigger=new trigger_1.Trigger(this,expression,action,...quantifiers);let added=!1;if(trigger.clauses.length)for(const clause of trigger.clauses){const newNode=new node_1.Node(clause,this,trigger);this.root.addNode(newNode)&&(added=!0)}return added&&++this.totalTriggers,trigger}removeTrigger(trigger){const result=this.root.removeTrigger(trigger);return result&&--this.totalTriggers,result}treeToString(indent=0){const builder=[];return this._treeToString(builder,this.root,indent),builder.join("")}matches(state){return this.root.matches(state)}verifyTree(){return this._verifyTree(this.root,new Set)}_verifyTree(node,visited){let badNode;if(!visited.has(node)){visited.add(node);for(let i=0;!badNode&&i<node.specializations.length;++i){const first=node.specializations[i];if(node.relationship(first)!==relationshipType_1.RelationshipType.generalizes)badNode=node;else{this._verifyTree(node.specializations[i],visited);for(let j=i+1;j<node.specializations.length;++j){const second=node.specializations[j];if(first.relationship(second)!==relationshipType_1.RelationshipType.incomparable){badNode=node;break}}}}}return badNode}_treeToString(builder,node,indent){node.toString(builder,indent),builder.push(` [${node.triggers.length}]`),builder.push("\n");for(const child of node.specializations)this._treeToString(builder,child,indent+2)}};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXJUcmVlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhwcmVzc2lvbl8xIiwicmVxdWlyZSIsImNsYXVzZV8xIiwibm9kZV8xIiwicmVsYXRpb25zaGlwVHlwZV8xIiwidHJpZ2dlcl8xIiwiVHJpZ2dlclRyZWUiLCJbb2JqZWN0IE9iamVjdF0iLCJ0aGlzIiwib3B0aW1pemVycyIsImNvbXBhcmVycyIsInRvdGFsVHJpZ2dlcnMiLCJyb290IiwiTm9kZSIsIkNsYXVzZSIsInN0cmluZ09yRXhwcmVzc2lvbiIsImFjdGlvbiIsInF1YW50aWZpZXJzIiwiZXhwcmVzc2lvbiIsIkV4cHJlc3Npb24iLCJwYXJzZSIsInRyaWdnZXIiLCJUcmlnZ2VyIiwiYWRkZWQiLCJjbGF1c2VzIiwibGVuZ3RoIiwiY2xhdXNlIiwibmV3Tm9kZSIsImFkZE5vZGUiLCJyZXN1bHQiLCJyZW1vdmVUcmlnZ2VyIiwiaW5kZW50IiwiYnVpbGRlciIsIl90cmVlVG9TdHJpbmciLCJqb2luIiwic3RhdGUiLCJtYXRjaGVzIiwiX3ZlcmlmeVRyZWUiLCJTZXQiLCJub2RlIiwidmlzaXRlZCIsImJhZE5vZGUiLCJoYXMiLCJhZGQiLCJpIiwic3BlY2lhbGl6YXRpb25zIiwiZmlyc3QiLCJyZWxhdGlvbnNoaXAiLCJSZWxhdGlvbnNoaXBUeXBlIiwiZ2VuZXJhbGl6ZXMiLCJqIiwic2Vjb25kIiwiaW5jb21wYXJhYmxlIiwidG9TdHJpbmciLCJwdXNoIiwidHJpZ2dlcnMiLCJjaGlsZCJdLCJtYXBwaW5ncyI6IkFBQUEsYUFRQUEsT0FBT0MsZUFBZUMsUUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTUMsYUFBZUMsUUFBUSxpQkFDdkJDLFNBQVdELFFBQVEsWUFDbkJFLE9BQVNGLFFBQVEsVUFDakJHLG1CQUFxQkgsUUFBUSxzQkFDN0JJLFVBQVlKLFFBQVEsYUEwSDFCSCxRQUFRUSxZQXRIUixNQUlJQyxjQUlJQyxLQUFLQyxXQUFhLEdBSWxCRCxLQUFLRSxVQUFZLEdBSWpCRixLQUFLRyxjQUFnQixFQUNyQkgsS0FBS0ksS0FBTyxJQUFJVCxPQUFPVSxLQUFLLElBQUlYLFNBQVNZLE9BQVVOLE1BS3ZERCxXQUNJLDBCQUEyQkMsS0FBS0cseUJBU3BDSixXQUFXUSxtQkFBb0JDLFVBQVdDLGFBQ3RDLE1BQU1DLFdBQTJDLGlCQUF2QkgsbUJBQWtDZixhQUFhbUIsV0FBV0MsTUFBTUwsb0JBQXNCQSxtQkFDMUdNLFFBQVUsSUFBSWhCLFVBQVVpQixRQUFRZCxLQUFNVSxXQUFZRixVQUFXQyxhQUNuRSxJQUFJTSxPQUFRLEVBQ1osR0FBSUYsUUFBUUcsUUFBUUMsT0FDaEIsSUFBSyxNQUFNQyxVQUFVTCxRQUFRRyxRQUFTLENBQ2xDLE1BQU1HLFFBQVUsSUFBSXhCLE9BQU9VLEtBQUthLE9BQVFsQixLQUFNYSxTQUMxQ2IsS0FBS0ksS0FBS2dCLFFBQVFELFdBQ2xCSixPQUFRLEdBT3BCLE9BSElBLFNBQ0VmLEtBQUtHLGNBRUpVLFFBT1hkLGNBQWNjLFNBQ1YsTUFBTVEsT0FBU3JCLEtBQUtJLEtBQUtrQixjQUFjVCxTQUl2QyxPQUhJUSxVQUNFckIsS0FBS0csY0FFSmtCLE9BT1h0QixhQUFhd0IsT0FBUyxHQUNsQixNQUFNQyxRQUFVLEdBRWhCLE9BREF4QixLQUFLeUIsY0FBY0QsUUFBU3hCLEtBQUtJLEtBQU1tQixRQUNoQ0MsUUFBUUUsS0FBSyxJQU94QjNCLFFBQVE0QixPQUNKLE9BQU8zQixLQUFLSSxLQUFLd0IsUUFBUUQsT0FNN0I1QixhQUNJLE9BQU9DLEtBQUs2QixZQUFZN0IsS0FBS0ksS0FBTSxJQUFJMEIsS0FFM0MvQixZQUFZZ0MsS0FBTUMsU0FDZCxJQUFJQyxRQUNKLElBQUtELFFBQVFFLElBQUlILE1BQU8sQ0FDcEJDLFFBQVFHLElBQUlKLE1BQ1osSUFBSyxJQUFJSyxFQUFJLEdBQUlILFNBQVdHLEVBQUlMLEtBQUtNLGdCQUFnQnBCLFNBQVVtQixFQUFHLENBQzlELE1BQU1FLE1BQVFQLEtBQUtNLGdCQUFnQkQsR0FDbkMsR0FBSUwsS0FBS1EsYUFBYUQsU0FBVzFDLG1CQUFtQjRDLGlCQUFpQkMsWUFDakVSLFFBQVVGLFNBRVQsQ0FDRC9CLEtBQUs2QixZQUFZRSxLQUFLTSxnQkFBZ0JELEdBQUlKLFNBQzFDLElBQUssSUFBSVUsRUFBSU4sRUFBSSxFQUFHTSxFQUFJWCxLQUFLTSxnQkFBZ0JwQixTQUFVeUIsRUFBRyxDQUN0RCxNQUFNQyxPQUFTWixLQUFLTSxnQkFBZ0JLLEdBQ3BDLEdBQUlKLE1BQU1DLGFBQWFJLFVBQVkvQyxtQkFBbUI0QyxpQkFBaUJJLGFBQWMsQ0FDakZYLFFBQVVGLEtBQ1YsVUFNcEIsT0FBT0UsUUFFWGxDLGNBQWN5QixRQUFTTyxLQUFNUixRQUN6QlEsS0FBS2MsU0FBU3JCLFFBQVNELFFBQ3ZCQyxRQUFRc0IsVUFBVWYsS0FBS2dCLFNBQVM5QixXQUNoQ08sUUFBUXNCLEtBQUssTUFDYixJQUFLLE1BQU1FLFNBQVNqQixLQUFLTSxnQkFDckJyQyxLQUFLeUIsY0FBY0QsUUFBU3dCLE1BQU96QixPQUFTIiwiZmlsZSI6Ii9ob21lL3ZzdHMvd29yay8xL3MvbGlicmFyaWVzL2FkYXB0aXZlLWV4cHJlc3Npb25zL2xpYi90cmlnZ2VyVHJlZXMvdHJpZ2dlclRyZWUuanMifQ==