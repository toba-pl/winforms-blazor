"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const expression_1=require(179),expressionType_1=require(192),relationshipType_1=require(219);class Clause extends expression_1.Expression{constructor(clauseOrExpression){if(super(expressionType_1.ExpressionType.And,void 0),this.anyBindings=new Map,this.subsumed=!1,clauseOrExpression)if(Array.isArray(clauseOrExpression)){const children=clauseOrExpression;this.children=children}else if(clauseOrExpression instanceof Clause){const fromClause=clauseOrExpression;this.children=[...fromClause.children];for(const[key,value]of fromClause.anyBindings.entries())this.anyBindings.set(key,value)}else if(clauseOrExpression instanceof expression_1.Expression){const expression=clauseOrExpression;this.children.push(expression)}}toString(builder=[],indent=0){builder.push(" ".repeat(indent)),this.subsumed&&builder.push("*"),builder.push("(");let first=!0;for(const child of this.children)first?first=!1:builder.push(" && "),builder.push(child.toString());return builder.push(")"),this._ignored&&(builder.push(" ignored("),builder.push(this._ignored.toString()),builder.push(")")),this.anyBindings.forEach((value,key)=>{builder.push(` ${key}->${value}`)}),builder.join("")}relationship(other,comparers){let soFar=relationshipType_1.RelationshipType.incomparable,shorter=this,shorterCount=shorter.children.length,longer=other,longerCount=longer.children.length,swapped=!1;if(longerCount<shorterCount){longer=this,shorter=other;const tmp=longerCount;longerCount=shorterCount,shorterCount=tmp,swapped=!0}if(0===shorterCount)soFar=0===longerCount?relationshipType_1.RelationshipType.equal:relationshipType_1.RelationshipType.generalizes;else{for(const shortPredicate of shorter.children){let shorterRel=relationshipType_1.RelationshipType.incomparable;for(const longPredicate of longer.children)if((shorterRel=this._relationship(shortPredicate,longPredicate,comparers))!==relationshipType_1.RelationshipType.incomparable)break;if(shorterRel===relationshipType_1.RelationshipType.incomparable){soFar=relationshipType_1.RelationshipType.incomparable;break}if(soFar===relationshipType_1.RelationshipType.incomparable&&(soFar=shorterRel),soFar===relationshipType_1.RelationshipType.equal){if(shorterRel!==relationshipType_1.RelationshipType.generalizes&&(shorterRel!==relationshipType_1.RelationshipType.specializes||shorterCount!==longerCount)&&shorterRel!==relationshipType_1.RelationshipType.equal)break;soFar=shorterRel}else if(soFar!=shorterRel)break}if(shorterCount!==longerCount)switch(soFar){case relationshipType_1.RelationshipType.equal:case relationshipType_1.RelationshipType.generalizes:soFar=relationshipType_1.RelationshipType.generalizes;break;default:soFar=relationshipType_1.RelationshipType.incomparable}soFar=this._bindingRelationship(soFar,shorter,longer)}return this._swap(soFar,swapped)}matches(clause,memory){let matched=!1;if(clause.deepEquals(this)&&(matched=!0,this._ignored)){const{value:match,error:error}=this._ignored.tryEvaluate(memory);matched=!error&&match}return matched}splitIgnores(){const children=[],ignores=[];for(let i=0;i<this.children.length;i++){const child=this.children[i];child.type===expressionType_1.ExpressionType.Ignore?ignores.push(child):children.push(child)}this.children=children,ignores.length>0&&(this._ignored=expression_1.Expression.andExpression(...ignores))}_bindingRelationship(soFar,shorterClause,longerClause){if(soFar===relationshipType_1.RelationshipType.equal){let swapped=!1,shorter=shorterClause.anyBindings,longer=longerClause.anyBindings;shorterClause.anyBindings.size>longerClause.anyBindings.size&&(shorter=longerClause.anyBindings,longer=shorterClause.anyBindings,swapped=!0);for(const[shorterKey,shorterValue]of shorter.entries()){let found=!1;for(const[longerKey,longerValue]of longer.entries())if(shorterKey===longerKey&&shorterValue===longerValue){found=!0;break}found||(soFar=relationshipType_1.RelationshipType.incomparable)}soFar===relationshipType_1.RelationshipType.equal&&shorter.size<longer.size&&(soFar=relationshipType_1.RelationshipType.specializes),soFar=this._swap(soFar,swapped)}return soFar}_swap(soFar,swapped){let reln=soFar;if(swapped)switch(soFar){case relationshipType_1.RelationshipType.specializes:reln=relationshipType_1.RelationshipType.generalizes;break;case relationshipType_1.RelationshipType.generalizes:reln=relationshipType_1.RelationshipType.specializes}return reln}_relationship(expr,other,comparers){let comparer,relationship=relationshipType_1.RelationshipType.incomparable,root=expr,rootOther=other;return expr.type===expressionType_1.ExpressionType.Not&&other.type===expressionType_1.ExpressionType.Not&&(root=expr.children[0],rootOther=other.children[0]),root.type===other.type&&(comparer=comparers[root.type]),relationship=comparer?comparer.relationship(root,rootOther):expr.deepEquals(other)?relationshipType_1.RelationshipType.equal:relationshipType_1.RelationshipType.incomparable}}exports.Clause=Clause;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXVzZS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4cHJlc3Npb25fMSIsInJlcXVpcmUiLCJleHByZXNzaW9uVHlwZV8xIiwicmVsYXRpb25zaGlwVHlwZV8xIiwiQ2xhdXNlIiwiRXhwcmVzc2lvbiIsIltvYmplY3QgT2JqZWN0XSIsImNsYXVzZU9yRXhwcmVzc2lvbiIsInN1cGVyIiwiRXhwcmVzc2lvblR5cGUiLCJBbmQiLCJ1bmRlZmluZWQiLCJ0aGlzIiwiYW55QmluZGluZ3MiLCJNYXAiLCJzdWJzdW1lZCIsIkFycmF5IiwiaXNBcnJheSIsImNoaWxkcmVuIiwiZnJvbUNsYXVzZSIsImtleSIsImVudHJpZXMiLCJzZXQiLCJleHByZXNzaW9uIiwicHVzaCIsImJ1aWxkZXIiLCJpbmRlbnQiLCJyZXBlYXQiLCJmaXJzdCIsImNoaWxkIiwidG9TdHJpbmciLCJfaWdub3JlZCIsImZvckVhY2giLCJqb2luIiwib3RoZXIiLCJjb21wYXJlcnMiLCJzb0ZhciIsIlJlbGF0aW9uc2hpcFR5cGUiLCJpbmNvbXBhcmFibGUiLCJzaG9ydGVyIiwic2hvcnRlckNvdW50IiwibGVuZ3RoIiwibG9uZ2VyIiwibG9uZ2VyQ291bnQiLCJzd2FwcGVkIiwidG1wIiwiZXF1YWwiLCJnZW5lcmFsaXplcyIsInNob3J0UHJlZGljYXRlIiwic2hvcnRlclJlbCIsImxvbmdQcmVkaWNhdGUiLCJfcmVsYXRpb25zaGlwIiwic3BlY2lhbGl6ZXMiLCJfYmluZGluZ1JlbGF0aW9uc2hpcCIsIl9zd2FwIiwiY2xhdXNlIiwibWVtb3J5IiwibWF0Y2hlZCIsImRlZXBFcXVhbHMiLCJtYXRjaCIsImVycm9yIiwidHJ5RXZhbHVhdGUiLCJpZ25vcmVzIiwiaSIsInR5cGUiLCJJZ25vcmUiLCJhbmRFeHByZXNzaW9uIiwic2hvcnRlckNsYXVzZSIsImxvbmdlckNsYXVzZSIsInNpemUiLCJzaG9ydGVyS2V5Iiwic2hvcnRlclZhbHVlIiwiZm91bmQiLCJsb25nZXJLZXkiLCJsb25nZXJWYWx1ZSIsInJlbG4iLCJleHByIiwiY29tcGFyZXIiLCJyZWxhdGlvbnNoaXAiLCJyb290Iiwicm9vdE90aGVyIiwiTm90Il0sIm1hcHBpbmdzIjoiQUFBQSxhQVFBQSxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxhQUFlQyxRQUFRLGlCQUN2QkMsaUJBQW1CRCxRQUFRLHFCQUMzQkUsbUJBQXFCRixRQUFRLHNCQUluQyxNQUFNRyxlQUFlSixhQUFhSyxXQUs5QkMsWUFBWUMsb0JBVVIsR0FUQUMsTUFBTU4saUJBQWlCTyxlQUFlQyxTQUFLQyxHQUkzQ0MsS0FBS0MsWUFBYyxJQUFJQyxJQUl2QkYsS0FBS0csVUFBVyxFQUNaUixtQkFDQSxHQUFJUyxNQUFNQyxRQUFRVixvQkFBcUIsQ0FDbkMsTUFBTVcsU0FBV1gsbUJBQ2pCSyxLQUFLTSxTQUFXQSxjQUVmLEdBQUlYLDhCQUE4QkgsT0FBUSxDQUMzQyxNQUFNZSxXQUFhWixtQkFDbkJLLEtBQUtNLFNBQVcsSUFBSUMsV0FBV0QsVUFDL0IsSUFBSyxNQUFPRSxJQUFLckIsU0FBVW9CLFdBQVdOLFlBQVlRLFVBQzlDVCxLQUFLQyxZQUFZUyxJQUFJRixJQUFLckIsWUFHN0IsR0FBSVEsOEJBQThCUCxhQUFhSyxXQUFZLENBQzVELE1BQU1rQixXQUFhaEIsbUJBQ25CSyxLQUFLTSxTQUFTTSxLQUFLRCxhQVMvQmpCLFNBQVNtQixRQUFVLEdBQUlDLE9BQVMsR0FDNUJELFFBQVFELEtBQUssSUFBSUcsT0FBT0QsU0FDcEJkLEtBQUtHLFVBQ0xVLFFBQVFELEtBQUssS0FFakJDLFFBQVFELEtBQUssS0FDYixJQUFJSSxPQUFRLEVBQ1osSUFBSyxNQUFNQyxTQUFTakIsS0FBS00sU0FDakJVLE1BQ0FBLE9BQVEsRUFHUkgsUUFBUUQsS0FBSyxRQUVqQkMsUUFBUUQsS0FBS0ssTUFBTUMsWUFXdkIsT0FUQUwsUUFBUUQsS0FBSyxLQUNUWixLQUFLbUIs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QUN4QjZCLE9BQVMwQixhQUFhdkQsWUFDdEJzRCxjQUFjdEQsWUFBWXdELEtBQU9ELGFBQWF2RCxZQUFZd0QsT0FDMUQ5QixRQUFVNkIsYUFBYXZELFlBQ3ZCNkIsT0FBU3lCLGNBQWN0RCxZQUN2QitCLFNBQVUsR0FFZCxJQUFLLE1BQU8wQixXQUFZQyxnQkFBaUJoQyxRQUFRbEIsVUFBVyxDQUN4RCxJQUFJbUQsT0FBUSxFQUNaLElBQUssTUFBT0MsVUFBV0MsZUFBZ0JoQyxPQUFPckIsVUFDMUMsR0FBSWlELGFBQWVHLFdBQWFGLGVBQWlCRyxZQUFhLENBQzFERixPQUFRLEVBQ1IsTUFHSEEsUUFDRHBDLE1BQVFqQyxtQkFBbUJrQyxpQkFBaUJDLGNBR2hERixRQUFVakMsbUJBQW1Ca0MsaUJBQWlCUyxPQUFTUCxRQUFROEIsS0FBTzNCLE9BQU8yQixPQUM3RWpDLE1BQVFqQyxtQkFBbUJrQyxpQkFBaUJlLGFBRWhEaEIsTUFBUXhCLEtBQUswQyxNQUFNbEIsTUFBT1EsU0FFOUIsT0FBT1IsTUFFWDlCLE1BQU04QixNQUFPUSxTQUNULElBQUkrQixLQUFPdkMsTUFDWCxHQUFJUSxRQUNBLE9BQVFSLE9BQ0osS0FBS2pDLG1CQUFtQmtDLGlCQUFpQmUsWUFDckN1QixLQUFPeEUsbUJBQW1Ca0MsaUJBQWlCVSxZQUMzQyxNQUNKLEtBQUs1QyxtQkFBbUJrQyxpQkFBaUJVLFlBQ3JDNEIsS0FBT3hFLG1CQUFtQmtDLGlCQUFpQmUsWUFJdkQsT0FBT3VCLEtBRVhyRSxjQUFjc0UsS0FBTTFDLE1BQU9DLFdBQ3ZCLElBT0kwQyxTQVBBQyxhQUFlM0UsbUJBQW1Ca0MsaUJBQWlCQyxhQUNuRHlDLEtBQU9ILEtBQ1BJLFVBQVk5QyxNQWVoQixPQWRJMEMsS0FBS1osT0FBUzlELGlCQUFpQk8sZUFBZXdFLEtBQU8vQyxNQUFNOEIsT0FBUzlELGlCQUFpQk8sZUFBZXdFLE1BQ3BHRixLQUFPSCxLQUFLMUQsU0FBUyxHQUNyQjhELFVBQVk5QyxNQUFNaEIsU0FBUyxJQUczQjZELEtBQUtmLE9BQVM5QixNQUFNOEIsT0FDcEJhLFNBQVcxQyxVQUFVNEMsS0FBS2YsT0FHMUJjLGFBREFELFNBQ2VBLFNBQVNDLGFBQWFDLEtBQU1DLFdBRzVCSixLQUFLbEIsV0FBV3hCLE9BQVMvQixtQkFBbUJrQyxpQkFBaUJTLE1BQVEzQyxtQkFBbUJrQyxpQkFBaUJDLGNBS3BJeEMsUUFBUU0sT0FBU0EiLCJmaWxlIjoiL2hvbWUvdnN0cy93b3JrLzEvcy9saWJyYXJpZXMvYWRhcHRpdmUtZXhwcmVzc2lvbnMvbGliL3RyaWdnZXJUcmVlcy9jbGF1c2UuanMifQ==