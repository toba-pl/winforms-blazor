"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const clause_1=require(215),constant_1=require(167),expression_1=require(179),expressionType_1=require(192),quantifier_1=require(218),relationshipType_1=require(219),pushDownNot=(expression,inNot=!1)=>{let newExpr=expression;const negation=expression.evaluator.negation;switch(expression.type){case expressionType_1.ExpressionType.And:case expressionType_1.ExpressionType.Or:const children=expression.children.map(child=>pushDownNot(child,inNot));newExpr=1===children.length?children[0]:expression_1.Expression.makeExpression(expression.type===expressionType_1.ExpressionType.And?inNot?expressionType_1.ExpressionType.Or:expressionType_1.ExpressionType.And:inNot?expressionType_1.ExpressionType.And:expressionType_1.ExpressionType.Or,void 0,...children);break;case expressionType_1.ExpressionType.Not:newExpr=pushDownNot(expression.children[0],!inNot);break;default:inNot&&(newExpr=negation?expression.type===negation.type?expression_1.Expression.makeExpression(void 0,negation,...expression.children.map(child=>pushDownNot(child,!0))):expression_1.Expression.makeExpression(void 0,negation,...expression.children):expression_1.Expression.makeExpression(expressionType_1.ExpressionType.Not,void 0,expression))}return newExpr};exports.Trigger=class{constructor(tree,expression,action,...quantifiers){if(this._tree=tree,this.action=action,this.originalExpression=expression,this._quantifiers=quantifiers,expression){const normalForm=pushDownNot(expression);this._clauses=this._generateClauses(normalForm),this._removeDuplicatedPredicates(),this._optimizeClauses(),this._expandQuantifiers(),this._removeDuplicates(),this._markSubsumedClauses(),this._splitIgnores()}else this._clauses=[]}get clauses(){return this._clauses}relationship(other,comparers){let result;const first=this._relationship(this,other,comparers),second=this._relationship(other,this,comparers);return result=first===relationshipType_1.RelationshipType.equal?second===relationshipType_1.RelationshipType.equal?relationshipType_1.RelationshipType.equal:relationshipType_1.RelationshipType.specializes:first===relationshipType_1.RelationshipType.specializes?relationshipType_1.RelationshipType.specializes:second===relationshipType_1.RelationshipType.equal||second===relationshipType_1.RelationshipType.specializes?relationshipType_1.RelationshipType.generalizes:relationshipType_1.RelationshipType.incomparable}matches(nodeClause,state){return void 0!==this.clauses.find(clause=>clause.matches(nodeClause,state))}toString(builder=[],indent=0){if(builder.push(" ".repeat(indent)),this._clauses.length>0){let first=!0;for(const clause of this._clauses)first?first=!1:(builder.push("\n"),builder.push(" ".repeat(indent)),builder.push("|| ")),builder.push(clause.toString())}else builder.push("<Empty>");return builder.join("")}_relationship(trigger,other,comparers){let soFar=relationshipType_1.RelationshipType.incomparable;for(const clause of trigger.clauses)if(!clause.subsumed){let clauseSoFar=relationshipType_1.RelationshipType.incomparable;for(const second of other.clauses)if(!second.subsumed){const reln=clause.relationship(second,comparers);if(reln===relationshipType_1.RelationshipType.equal||reln===relationshipType_1.RelationshipType.specializes){clauseSoFar=reln;break}}if(clauseSoFar===relationshipType_1.RelationshipType.incomparable){soFar=relationshipType_1.RelationshipType.incomparable;break}clauseSoFar===relationshipType_1.RelationshipType.equal?soFar===relationshipType_1.RelationshipType.incomparable&&(soFar=clauseSoFar):clauseSoFar===relationshipType_1.RelationshipType.specializes&&(soFar=clauseSoFar)}return soFar}_generateClauses(expression){switch(expression.type){case expressionType_1.ExpressionType.And:let soFar=[],first=!0;for(let i=0;i<expression.children.length;i++){const child=expression.children[i],clauses=this._generateClauses(child);if(0===clauses.length){soFar=[];break}if(first)soFar.push(...clauses),first=!1;else{const newClauses=[];for(const old of soFar)for(const clause of clauses){const children=[];children.push(...old.children),children.push(...clause.children),newClauses.push(new clause_1.Clause(children))}soFar=newClauses}}return soFar;case expressionType_1.ExpressionType.Or:const clauses=[];for(let i=0;i<expression.children.length;i++){const child=expression.children[i];clauses.push(...this._generateClauses(child))}return clauses;case expressionType_1.ExpressionType.Optional:return[new clause_1.Clause,...this._generateClauses(expression.children[0])];default:return expression instanceof constant_1.Constant&&"boolean"==typeof expression.value?expression.value?[new clause_1.Clause]:[]:[new clause_1.Clause(expression)]}}_removeDuplicatedPredicates(){for(let i=0;i<this._clauses.length;++i){const clause=this._clauses[i],children=[];for(let p=0;p<clause.children.length;++p){const pred=clause.children[p];let found=!1;for(let q=p+1;q<clause.children.length;++q)if(pred.deepEquals(clause.children[q])){found=!0;break}found||children.push(pred)}this._clauses[i]=new clause_1.Clause(children)}}_markSubsumedClauses(){for(let i=0;i<this._clauses.length;++i){const clause=this._clauses[i];if(!clause.subsumed)for(let j=i+1;j<this._clauses.length;++j){const other=this._clauses[j];if(!other.subsumed){const reln=clause.relationship(other,this._tree.comparers);if(reln===relationshipType_1.RelationshipType.equal)this._clauses.splice(j,1),--j;else{if(reln===relationshipType_1.RelationshipType.specializes){clause.subsumed=!0;break}reln===relationshipType_1.RelationshipType.generalizes&&(other.subsumed=!0)}}}}}_splitIgnores(){for(let i=0;i<this._clauses.length;i++)this._clauses[i].splitIgnores()}_optimizeClauses(){this._clauses.forEach(clause=>{this._tree.optimizers.forEach(optimizer=>{optimizer.optimize(clause)})})}_expandQuantifiers(){if(this._quantifiers&&this._quantifiers.length>0)for(let i=0;i<this._quantifiers.length;i++){const quantifier=this._quantifiers[i],newClauses=[];for(let j=0;j<this._clauses.length;j++){const clause=this._clauses[j];newClauses.push(...this._expandQuantifiersWithClause(quantifier,clause))}this._clauses=newClauses}}_expandQuantifiersWithClause(quantifier,clause){const results=[];if(quantifier.type===quantifier_1.QuantifierType.all){const children=[];if(quantifier.bindings.length>0)for(let i=0;i<clause.children.length;i++){const predicate=clause.children[i];for(let j=0;j<quantifier.bindings.length;j++){const binding=quantifier.bindings[j],{expression:newPredicate,changed:changed}=this._substituteVariable(quantifier.variable,binding,predicate);if(children.push(newPredicate),!changed)break}}else for(let i=0;i<clause.children.length;i++){const predicate=clause.children[i],{changed:changed}=this._substituteVariable(quantifier.variable,"",predicate);changed||children.push(predicate)}results.push(new clause_1.Clause(children))}else if(quantifier.bindings.length>0){let changed=!1;for(let i=0;i<quantifier.bindings.length;i++){const binding=quantifier.bindings[i],newClause=new clause_1.Clause(clause),children=[];for(let j=0;j<clause.children.length;j++){const predicate=clause.children[j],{expression:newPredicate,changed:predicateChanged}=this._substituteVariable(quantifier.variable,binding,predicate);changed=changed||predicateChanged,children.push(newPredicate)}if(changed&&newClause.anyBindings.set(quantifier.variable,binding),newClause.children=[...children],results.push(newClause),!changed)break}}else{let changed=!1;for(let i=0;i<clause.children.length;i++){const predicate=clause.children[i],{changed:predicateChanged}=this._substituteVariable(quantifier.variable,"",predicate);if(predicateChanged){changed=!0;break}}changed||results.push(clause)}return results}_substituteVariable(variable,binding,expression){let newExpr=expression,changed=!1;if(expression.type===expressionType_1.ExpressionType.Accessor&&1===expression.children.length&&expression.children[0]instanceof constant_1.Constant&&"string"==typeof expression.children[0].value&&expression.children[0].value===variable)newExpr=expression_1.Expression.makeExpression(expressionType_1.ExpressionType.Accessor,void 0,new constant_1.Constant(binding)),changed=!0;else{const children=[];for(let i=0;i<expression.children.length;i++){const child=expression.children[i],{expression:childExpr,changed:childChanged}=this._substituteVariable(variable,binding,child);children.push(childExpr),changed=changed||childChanged}changed&&(newExpr=new expression_1.Expression(void 0,expression.evaluator,...children))}return{expression:newExpr,changed:changed}}_removeDuplicates(){for(const clause of this._clauses){const predicates=[...clause.children];for(let i=0;i<predicates.length;++i){const first=predicates[i];for(let j=i+1;j<predicates.length;){const second=predicates[j];first.deepEquals(second)?predicates.splice(j,1):++j}}clause.children=[...predicates]}}};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjbGF1c2VfMSIsInJlcXVpcmUiLCJjb25zdGFudF8xIiwiZXhwcmVzc2lvbl8xIiwiZXhwcmVzc2lvblR5cGVfMSIsInF1YW50aWZpZXJfMSIsInJlbGF0aW9uc2hpcFR5cGVfMSIsInB1c2hEb3duTm90IiwiZXhwcmVzc2lvbiIsImluTm90IiwibmV3RXhwciIsIm5lZ2F0aW9uIiwiZXZhbHVhdG9yIiwidHlwZSIsIkV4cHJlc3Npb25UeXBlIiwiQW5kIiwiT3IiLCJjaGlsZHJlbiIsIm1hcCIsImNoaWxkIiwibGVuZ3RoIiwiRXhwcmVzc2lvbiIsIm1ha2VFeHByZXNzaW9uIiwidW5kZWZpbmVkIiwiTm90IiwiVHJpZ2dlciIsIltvYmplY3QgT2JqZWN0XSIsInRyZWUiLCJhY3Rpb24iLCJxdWFudGlmaWVycyIsInRoaXMiLCJfdHJlZSIsIm9yaWdpbmFsRXhwcmVzc2lvbiIsIl9xdWFudGlmaWVycyIsIm5vcm1hbEZvcm0iLCJfY2xhdXNlcyIsIl9nZW5lcmF0ZUNsYXVzZXMiLCJfcmVtb3ZlRHVwbGljYXRlZFByZWRpY2F0ZXMiLCJfb3B0aW1pemVDbGF1c2VzIiwiX2V4cGFuZFF1YW50aWZpZXJzIiwiX3JlbW92ZUR1cGxpY2F0ZXMiLCJfbWFya1N1YnN1bWVkQ2xhdXNlcyIsIl9zcGxpdElnbm9yZXMiLCJjbGF1c2VzIiwib3RoZXIiLCJjb21wYXJlcnMiLCJyZXN1bHQiLCJmaXJzdCIsIl9yZWxhdGlvbnNoaXAiLCJzZWNvbmQiLCJSZWxhdGlvbnNoaXBUeXBlIiwiZXF1YWwiLCJzcGVjaWFsaXplcyIsImdlbmVyYWxpemVzIiwiaW5jb21wYXJhYmxlIiwibm9kZUNsYXVzZSIsInN0YXRlIiwiZmluZCIsImNsYXVzZSIsIm1hdGNoZXMiLCJidWlsZGVyIiwiaW5kZW50IiwicHVzaCIsInJlcGVhdCIsInRvU3RyaW5nIiwiam9pbiIsInRyaWdnZXIiLCJzb0ZhciIsInN1YnN1bWVkIiwiY2xhdXNlU29GYXIiLCJyZWxuIiwicmVsYXRpb25zaGlwIiwiaSIsIm5ld0NsYXVzZXMiLCJvbGQiLCJDbGF1c2UiLCJPcHRpb25hbCIsIkNvbnN0YW50IiwicCIsInByZWQiLCJmb3VuZCIsInEiLCJkZWVwRXF1YWxzIiwiaiIsInNwbGljZSIsInNwbGl0SWdub3JlcyIsImZvckVhY2giLCJvcHRpbWl6ZXJzIiwib3B0aW1pemVyIiwib3B0aW1pemUiLCJxdWFudGlmaWVyIiwiX2V4cGFuZFF1YW50aWZpZXJzV2l0aENsYXVzZSIsInJlc3VsdHMiLCJRdWFudGlmaWVyVHlwZSIsImFsbCIsImJpbmRpbmdzIiwicHJlZGljYXRlIiwiYmluZGluZyIsIm5ld1ByZWRpY2F0ZSIsImNoYW5nZWQiLCJfc3Vic3RpdHV0ZVZhcmlhYmxlIiwidmFyaWFibGUiLCJuZXdDbGF1c2UiLCJwcmVkaWNhdGVDaGFuZ2VkIiwiYW55QmluZGluZ3MiLCJzZXQiLCJBY2Nlc3NvciIsImNoaWxkRXhwciIsImNoaWxkQ2hhbmdlZCIsInByZWRpY2F0ZXMiXSwibWFwcGluZ3MiOiJBQUFBLGFBUUFBLE9BQU9DLGVBQWVDLFFBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELE1BQU1DLFNBQVdDLFFBQVEsWUFDbkJDLFdBQWFELFFBQVEsZUFDckJFLGFBQWVGLFFBQVEsaUJBQ3ZCRyxpQkFBbUJILFFBQVEscUJBQzNCSSxhQUFlSixRQUFRLGdCQUN2QkssbUJBQXFCTCxRQUFRLHNCQUk3Qk0sWUFBYyxDQUFDQyxXQUFZQyxPQUFRLEtBQ3JDLElBQUlDLFFBQVVGLFdBQ2QsTUFBTUcsU0FBV0gsV0FBV0ksVUFBVUQsU0FDdEMsT0FBUUgsV0FBV0ssTUFDZixLQUFLVCxpQkFBaUJVLGVBQWVDLElBQ3JDLEtBQUtYLGlCQUFpQlUsZUFBZUUsR0FDakMsTUFBTUMsU0FBV1QsV0FBV1MsU0FBU0MsSUFBS0MsT0FBVVosWUFBWVksTUFBT1YsUUFFbkVDLFFBRG9CLElBQXBCTyxT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QVVKLFFBQVM5RSxPQUNyR0YsU0FBUzZDLEtBQUs2QyxXQUNkUixRQUFVQSxTQUFXUyxhQUVyQlQsVUFDQXpGLFFBQVUsSUFBSVAsYUFBYWtCLGdCQUFXRSxFQUFXZixXQUFXSSxhQUFjSyxXQUdsRixNQUFPLENBQUVULFdBQVlFLFFBQVN5RixRQUFBQSxTQUVsQ3pFLG9CQUNJLElBQUssTUFBTWdDLFVBQVU1QixLQUFLSyxTQUFVLENBRWhDLE1BQU0wRSxXQUFhLElBQUluRCxPQUFPekMsVUFDOUIsSUFBSyxJQUFJdUQsRUFBSSxFQUFHQSxFQUFJcUMsV0FBV3pGLFNBQVVvRCxFQUFHLENBQ3hDLE1BQU16QixNQUFROEQsV0FBV3JDLEdBQ3pCLElBQUssSUFBSVcsRUFBSVgsRUFBSSxFQUFHVyxFQUFJMEIsV0FBV3pGLFFBQVMsQ0FDeEMsTUFBTTZCLE9BQVM0RCxXQUFXMUIsR0FDdEJwQyxNQUFNbUMsV0FBV2pDLFFBQ2pCNEQsV0FBV3pCLE9BQU9ELEVBQUcsS0FHbkJBLEdBSWR6QixPQUFPekMsU0FBVyxJQUFJNEYiLCJmaWxlIjoiL2hvbWUvdnN0cy93b3JrLzEvcy9saWJyYXJpZXMvYWRhcHRpdmUtZXhwcmVzc2lvbnMvbGliL3RyaWdnZXJUcmVlcy90cmlnZ2VyLmpzIn0=