"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const constant_1=require(167),expressionEvaluator_1=require(180),expressionType_1=require(192),extensions_1=require(193),functionTable_1=require(194),memory_1=require(201),options_1=require(204),parser_1=require(209),returnType_1=require(213);class Expression{constructor(type,evaluator,...children){if(this.validate=(()=>this.evaluator.validateExpression(this)),evaluator)this.evaluator=evaluator,this.children=children;else if(void 0!==type){if(!Expression.functions.get(type))throw Error(`${type} does not have an evaluator, it's not a built-in function or a custom function.`);this.evaluator=Expression.functions.get(type),this.children=children}}get returnType(){return this.evaluator.returnType}get type(){return this.evaluator.type}deepEquals(other){let eq=!1;if(other&&(eq=this.type===other.type))if(eq=this.children.length===other.children.length,this.type===expressionType_1.ExpressionType.And||this.type===expressionType_1.ExpressionType.Or)for(let i=0;eq&&i<this.children.length;i++){const primary=this.children[0];let found=!1;for(let j=0;j<this.children.length;j++)if(primary.deepEquals(other.children[j])){found=!0;break}eq=found}else for(let i=0;eq&&i<this.children.length;i++)eq=this.children[i].deepEquals(other.children[i]);return eq}references(){const{path:path,refs:refs}=this.referenceWalk(this);return void 0!==path&&refs.add(path),Array.from(refs)}referenceWalk(expression,extension){let path,refs=new Set;if(void 0===extension||!extension(expression)){const children=expression.children;if(expression.type===expressionType_1.ExpressionType.Accessor){const prop=children[0].value;1===children.length&&(path=prop),2===children.length&&(({path:path,refs:refs}=this.referenceWalk(children[1],extension)),void 0!==path&&(path=path.concat(".",prop)))}else if(expression.type===expressionType_1.ExpressionType.Element){if(({path:path,refs:refs}=this.referenceWalk(children[0],extension)),void 0!==path)if(children[1]instanceof constant_1.Constant){const cnst=children[1];cnst.returnType===returnType_1.ReturnType.String?path+=`.${cnst.value}`:path+=`[${cnst.value}]`}else refs.add(path);const result=this.referenceWalk(children[1],extension),idxPath=result.path,refs1=result.refs;refs=new Set([...refs,...refs1]),void 0!==idxPath&&refs.add(idxPath)}else if(expression.type===expressionType_1.ExpressionType.Foreach||expression.type===expressionType_1.ExpressionType.Where||expression.type===expressionType_1.ExpressionType.Select){let result=this.referenceWalk(children[0],extension);const child0Path=result.path,refs0=result.refs;void 0!==child0Path&&refs0.add(child0Path);const child2Path=(result=this.referenceWalk(children[2],extension)).path,refs2=result.refs;void 0!==child2Path&&refs2.add(child2Path);const iteratorName=children[1].children[0].value,nonLocalRefs2=Array.from(refs2).filter(x=>!(x===iteratorName||x.startsWith(iteratorName+".")||x.startsWith(iteratorName+"[")));refs=new Set([...refs,...refs0,...nonLocalRefs2])}else for(const child of expression.children){const result=this.referenceWalk(child,extension),childPath=result.path,refs0=result.refs;refs=new Set([...refs,...refs0]),void 0!==childPath&&refs.add(childPath)}}return{path:path,refs:refs}}static parse(expression,lookup){return new parser_1.ExpressionParser(lookup||Expression.lookup).parse(expression.replace(/^=/,""))}static lookup(functionName){const exprEvaluator=Expression.functions.get(functionName);if(exprEvaluator)return exprEvaluator}static makeExpression(type,evaluator,...children){const expr=new Expression(type,evaluator,...children);return expr.validate(),expr}static lambaExpression(func){return new Expression(expressionType_1.ExpressionType.Lambda,new expressionEvaluator_1.ExpressionEvaluator(expressionType_1.ExpressionType.Lambda,func))}static lambda(func){return new Expression(expressionType_1.ExpressionType.Lambda,new expressionEvaluator_1.ExpressionEvaluator(expressionType_1.ExpressionType.Lambda,(_expression,state,_)=>{let value,error;try{value=func(state)}catch(funcError){error=funcError}return{value:value,error:error}}))}static setPathToValue(property,value){return value instanceof Expression?Expression.makeExpression(expressionType_1.ExpressionType.SetPathToValue,void 0,property,value):Expression.makeExpression(expressionType_1.ExpressionType.SetPathToValue,void 0,property,new constant_1.Constant(value))}static equalsExpression(...children){return Expression.makeExpression(expressionType_1.ExpressionType.Equal,void 0,...children)}static andExpression(...children){return children.length>1?Expression.makeExpression(expressionType_1.ExpressionType.And,void 0,...children):children[0]}static orExpression(...children){return children.length>1?Expression.makeExpression(expressionType_1.ExpressionType.Or,void 0,...children):children[0]}static notExpression(child){return Expression.makeExpression(expressionType_1.ExpressionType.Not,void 0,child)}validateTree(){this.validate();for(const child of this.children)child.validateTree()}tryEvaluate(state,options){return extensions_1.Extensions.isMemoryInterface(state)||(state=memory_1.SimpleObjectMemory.wrap(state)),options=options||new options_1.Options,this.evaluator.tryEvaluate(this,state,options)}toString(){let builder="",valid=!1;if(this.type===expressionType_1.ExpressionType.Accessor&&this.children.length>=1){if(this.children[0]instanceof constant_1.Constant){const prop=this.children[0].value;"string"==typeof prop&&(1===this.children.length?(valid=!0,builder=builder.concat(prop)):2===this.children.length&&(valid=!0,builder=builder.concat(this.children[1].toString(),".",prop)))}}else this.type===expressionType_1.ExpressionType.Element&&2===this.children.length&&(valid=!0,builder=builder.concat(this.children[0].toString(),"[",this.children[1].toString(),"]"));if(!valid){const infix=this.type.length>0&&!new RegExp(/[a-z]/i).test(this.type[0])&&this.children.length>=2;infix||(builder=builder.concat(this.type)),builder=builder.concat("(");let first=!0;for(const child of this.children)first?first=!1:builder=infix?builder.concat(" ",this.type," "):builder.concat(", "),builder=builder.concat(child.toString());builder=builder.concat(")")}return builder}}Expression.functions=new functionTable_1.FunctionTable,exports.Expression=Expression;

//# sourceMappingURL=data:application/json;base64,