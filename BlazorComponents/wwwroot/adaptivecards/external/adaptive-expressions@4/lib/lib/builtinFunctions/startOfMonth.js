"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const dayjs_1=__importDefault(require(400)),utc_1=__importDefault(require(403));dayjs_1.default.extend(utc_1.default);const expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),functionUtils_internal_1=require(195),returnType_1=require(213);class StartOfMonth extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.StartOfMonth,StartOfMonth.evaluator,returnType_1.ReturnType.String,StartOfMonth.validator)}static evaluator(expr,state,options){let value,locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale,format=functionUtils_1.FunctionUtils.DefaultDateTimeFormat;const{args:args,error:childrenError}=functionUtils_1.FunctionUtils.evaluateChildren(expr,state,options);let error=childrenError;return error||(({format:format,locale:locale}=functionUtils_1.FunctionUtils.determineFormatAndLocale(args,3,format,locale)),"string"==typeof args[0]?({value:value,error:error}=StartOfMonth.evalStartOfMonth(args[0],format,locale)):error=`${expr} should contain an ISO format timestamp and an optional output format string.`),{value:value,error:error}}static evalStartOfMonth(timeStamp,format,locale){let result;const error=functionUtils_internal_1.InternalFunctionUtils.verifyISOTimestamp(timeStamp);return error||(result=dayjs_1.default(timeStamp).locale(locale).utc().startOf("month").format(format)),{value:result,error:error}}static validator(expr){functionUtils_1.FunctionUtils.validateOrder(expr,[returnType_1.ReturnType.String,returnType_1.ReturnType.String],returnType_1.ReturnType.String)}}exports.StartOfMonth=StartOfMonth;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXJ0T2ZNb250aC5qcyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRheWpzXzEiLCJyZXF1aXJlIiwidXRjXzEiLCJleHRlbmQiLCJleHByZXNzaW9uRXZhbHVhdG9yXzEiLCJleHByZXNzaW9uVHlwZV8xIiwiZnVuY3Rpb25VdGlsc18xIiwiZnVuY3Rpb25VdGlsc19pbnRlcm5hbF8xIiwicmV0dXJuVHlwZV8xIiwiU3RhcnRPZk1vbnRoIiwiRXhwcmVzc2lvbkV2YWx1YXRvciIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwiRXhwcmVzc2lvblR5cGUiLCJldmFsdWF0b3IiLCJSZXR1cm5UeXBlIiwiU3RyaW5nIiwidmFsaWRhdG9yIiwiZXhwciIsInN0YXRlIiwib3B0aW9ucyIsImxvY2FsZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsImZvcm1hdCIsIkZ1bmN0aW9uVXRpbHMiLCJEZWZhdWx0RGF0ZVRpbWVGb3JtYXQiLCJhcmdzIiwiZXJyb3IiLCJjaGlsZHJlbkVycm9yIiwiZXZhbHVhdGVDaGlsZHJlbiIsImRldGVybWluZUZvcm1hdEFuZExvY2FsZSIsImV2YWxTdGFydE9mTW9udGgiLCJ0aW1lU3RhbXAiLCJyZXN1bHQiLCJJbnRlcm5hbEZ1bmN0aW9uVXRpbHMiLCJ2ZXJpZnlJU09UaW1lc3RhbXAiLCJ1dGMiLCJzdGFydE9mIiwidmFsaWRhdGVPcmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsYUFRQSxJQUFJQSxnQkFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxLQUM5RCxPQUFRQSxLQUFPQSxJQUFJQyxXQUFjRCxJQUFNLENBQUVFLFFBQVdGLE1BRXhERyxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxRQUFVVCxnQkFBZ0JVLFFBQVEsVUFDbENDLE1BQVFYLGdCQUFnQlUsUUFBUSxxQkFDdENELFFBQVFMLFFBQVFRLE9BQU9ELE1BQU1QLFNBQzdCLE1BQU1TLHNCQUF3QkgsUUFBUSwwQkFDaENJLGlCQUFtQkosUUFBUSxxQkFDM0JLLGdCQUFrQkwsUUFBUSxvQkFDMUJNLHlCQUEyQk4sUUFBUSw2QkFDbkNPLGFBQWVQLFFBQVEsaUJBSTdCLE1BQU1RLHFCQUFxQkwsc0JBQXNCTSxvQkFJN0NDLGNBQ0lDLE1BQU1QLGlCQUFpQlEsZUFBZUosYUFBY0EsYUFBYUssVUFBV04sYUFBYU8sV0FBV0MsT0FBUVAsYUFBYVEsV0FLN0hOLGlCQUFpQk8sS0FBTUMsTUFBT0MsU0FDMUIsSUFBSXJCLE1BQ0FzQixPQUFTRCxRQUFRQyxPQUFTRCxRQUFRQyxPQUFTQyxLQUFLQyxpQkFBaUJDLGtCQUFrQkgsT0FDbkZJLE9BQVNuQixnQkFBZ0JvQixjQUFjQyxzQkFDM0MsTUFBTUMsS0FBRUEsS0FBTUMsTUFBT0MsZUFBa0J4QixnQkFBZ0JvQixjQUFjSyxpQkFBaUJiLEtBQU1DLE1BQU9DLFNBQ25HLElBQUlTLE1BQVFDLGNBVVosT0FUS0QsVUFDRUosT0FBQUEsT0FBUUosT0FBQUEsUUFBV2YsZ0JBQWdCb0IsY0FBY00seUJBQXlCSixLQUFNLEVBQUdILE9BQVFKLFNBQ3ZFLGlCQUFaTyxLQUFLLEtBQ1Q3QixNQUFBQSxNQUFPOEIsTUFBQUEsT0FBVXBCLGFBQWF3QixpQkFBaUJMLEtBQUssR0FBSUgsT0FBUUosU0FHbkVRLFNBQVdYLHFGQUdaLENBQUVuQixNQUFBQSxNQUFPOEIsTUFBQUEsT0FLcEJsQix3QkFBd0J1QixVQUFXVCxPQUFRSixRQUN2QyxJQUFJYyxPQUNKLE1BQU1OLE1BQVF0Qix5QkFBeUI2QixzQkFBc0JDLG1CQUFtQkgsV0FJaEYsT0FIS0wsUUFDRE0sT0FBU25DLFFBQVFMLFFBQVF1QyxXQUFXYixPQUFPQSxRQUFRaUIsTUFBTUMsUUFBUSxTQUFTZCxPQUFPQSxTQUU5RSxDQUFFMUIsTUFBT29DLE9BQVFOLE1BQUFBLE9BSzVCbEIsaUJBQWlCTyxNQUNiWixnQkFBZ0JvQixjQUFjYyxjQUFjdEIsS0FBTSxDQUFDVixhQUFhTyxXQUFXQyxPQUFRUixhQUFhTyxXQUFXQyxRQUFTUixhQUFhTyxXQUFXQyxTQUdwSmxCLFFBQVFXLGFBQWVBIiwiZmlsZSI6Ii9ob21lL3ZzdHMvd29yay8xL3MvbGlicmFyaWVzL2FkYXB0aXZlLWV4cHJlc3Npb25zL2xpYi9idWlsdGluRnVuY3Rpb25zL3N0YXJ0T2ZNb250aC5qcyJ9