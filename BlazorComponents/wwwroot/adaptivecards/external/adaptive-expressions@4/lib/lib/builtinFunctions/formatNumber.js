"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const d3_format_1=require(399),expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),returnType_1=require(213),localeInfo_1=require(200);class FormatNumber extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.FormatNumber,FormatNumber.evaluator(),returnType_1.ReturnType.String,FormatNumber.validator)}static evaluator(){return functionUtils_1.FunctionUtils.applyWithOptionsAndError((args,options)=>{let error,value=null;const number=args[0],precision=args[1];let locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale;if(locale=functionUtils_1.FunctionUtils.determineLocale(args,3,locale),functionUtils_1.FunctionUtils.isNumber(number))if(functionUtils_1.FunctionUtils.isNumber(precision))if(locale&&"string"!=typeof locale)error=`formatNubmer third argument ${locale} is not a valid locale`;else{const fixedNotation=`,.${precision}f`,roundedNumber=this.roundToPrecision(number,precision),formatLocale=localeInfo_1.localeInfo[locale];value=void 0!==formatLocale?d3_format_1.formatLocale(formatLocale).format(fixedNotation)(roundedNumber):d3_format_1.format(fixedNotation)(roundedNumber)}else error=`formatNumber second argument ${precision} must be a number`;else error=`formatNumber first argument ${number} must be a number`;return{value:value,error:error}})}static validator(expr){functionUtils_1.FunctionUtils.validateOrder(expr,[returnType_1.ReturnType.String],returnType_1.ReturnType.Number,returnType_1.ReturnType.Number)}}FormatNumber.roundToPrecision=((num,digits)=>Math.round(num*Math.pow(10,digits))/Math.pow(10,digits)),exports.FormatNumber=FormatNumber;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdE51bWJlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImQzX2Zvcm1hdF8xIiwicmVxdWlyZSIsImV4cHJlc3Npb25FdmFsdWF0b3JfMSIsImV4cHJlc3Npb25UeXBlXzEiLCJmdW5jdGlvblV0aWxzXzEiLCJyZXR1cm5UeXBlXzEiLCJsb2NhbGVJbmZvXzEiLCJGb3JtYXROdW1iZXIiLCJFeHByZXNzaW9uRXZhbHVhdG9yIiwiW29iamVjdCBPYmplY3RdIiwic3VwZXIiLCJFeHByZXNzaW9uVHlwZSIsImV2YWx1YXRvciIsIlJldHVyblR5cGUiLCJTdHJpbmciLCJ2YWxpZGF0b3IiLCJGdW5jdGlvblV0aWxzIiwiYXBwbHlXaXRoT3B0aW9uc0FuZEVycm9yIiwiYXJncyIsIm9wdGlvbnMiLCJlcnJvciIsIm51bWJlciIsInByZWNpc2lvbiIsImxvY2FsZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsImRldGVybWluZUxvY2FsZSIsImlzTnVtYmVyIiwiZml4ZWROb3RhdGlvbiIsInJvdW5kZWROdW1iZXIiLCJ0aGlzIiwicm91bmRUb1ByZWNpc2lvbiIsImZvcm1hdExvY2FsZSIsImxvY2FsZUluZm8iLCJ1bmRlZmluZWQiLCJmb3JtYXQiLCJleHByIiwidmFsaWRhdGVPcmRlciIsIk51bWJlciIsIm51bSIsImRpZ2l0cyIsIk1hdGgiLCJyb3VuZCIsInBvdyJdLCJtYXBwaW5ncyI6IkFBQUEsYUFTQUEsT0FBT0MsZUFBZUMsUUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTUMsWUFBY0MsUUFBUSxhQUN0QkMsc0JBQXdCRCxRQUFRLDBCQUNoQ0UsaUJBQW1CRixRQUFRLHFCQUMzQkcsZ0JBQWtCSCxRQUFRLG9CQUMxQkksYUFBZUosUUFBUSxpQkFDdkJLLGFBQWVMLFFBQVEsaUJBSTdCLE1BQU1NLHFCQUFxQkwsc0JBQXNCTSxvQkFJN0NDLGNBQ0lDLE1BQU1QLGlCQUFpQlEsZUFBZUosYUFBY0EsYUFBYUssWUFBYVAsYUFBYVEsV0FBV0MsT0FBUVAsYUFBYVEsV0FLL0hOLG1CQUNJLE9BQU9MLGdCQUFnQlksY0FBY0MseUJBQXlCLENBQUNDLEtBQU1DLFdBQ2pFLElBQ0lDLE1BREFyQixNQUFRLEtBRVosTUFBTXNCLE9BQVNILEtBQUssR0FDZEksVUFBWUosS0FBSyxHQUN2QixJQUFJSyxPQUFTSixRQUFRSSxPQUFTSixRQUFRSSxPQUFTQyxLQUFLQyxpQkFBaUJDLGtCQUFrQkgsT0FFdkYsR0FEQUEsT0FBU25CLGdCQUFnQlksY0FBY1csZ0JBQWdCVCxLQUFNLEVBQUdLLFFBQzNEbkIsZ0JBQWdCWSxjQUFjWSxTQUFTUCxRQUd2QyxHQUFLakIsZ0JBQWdCWSxjQUFjWSxTQUFTTixXQUc1QyxHQUFJQyxRQUE0QixpQkFBWEEsT0FDdEJILHFDQUF1Q0csbUNBRXRDLENBQ0QsTUFBTU0sbUJBQXFCUCxhQUNyQlEsY0FBZ0JDLEtBQUtDLGlCQUFpQlgsT0FBUUMsV0FDOUNXLGFBQWUzQixhQUFhNEIsV0FBV1gsUUFFekN4QixXQURpQm9DLElBQWpCRixhQUNRakMsWUFBWWlDLGFBQWFBLGNBQWNHLE9BQU9QLGNBQTlDN0IsQ0FBNkQ4QixlQUc3RDlCLFlBQVlvQyxPQUFPUCxjQUFuQjdCLENBQWtDOEIsb0JBYjlDVixzQ0FBd0NFLGtDQUh4Q0YscUNBQXVDQywwQkFtQjNDLE1BQU8sQ0FBRXRCLE1BQUFBLE1BQU9xQixNQUFBQSxTQUd4QlgsaUJBQWlCNEIsTUFDYmpDLGdCQUFnQlksY0FBY3NCLGNBQWNELEtBQU0sQ0FBQ2hDLGFBQWFRLFdBQVdDLFFBQVNULGFBQWFRLFdBQVcwQixPQUFRbEMsYUFBYVEsV0FBVzBCLFNBR3BKaEMsYUFBYXlCLGlCQUFtQixFQUFDUSxJQUFLQyxTQUFXQyxLQUFLQyxNQUFNSCxJQUFNRSxLQUFLRSxJQUFJLEdBQUlILFNBQVdDLEtBQUtFLElBQUksR0FBSUgsU0FDdkczQyxRQUFRUyxhQUFlQSIsImZpbGUiOiIvaG9tZS92c3RzL3dvcmsvMS9zL2xpYnJhcmllcy9hZGFwdGl2ZS1leHByZXNzaW9ucy9saWIvYnVpbHRpbkZ1bmN0aW9ucy9mb3JtYXROdW1iZXIuanMifQ==