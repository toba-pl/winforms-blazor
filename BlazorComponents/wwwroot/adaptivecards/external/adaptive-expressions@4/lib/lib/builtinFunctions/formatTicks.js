"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const big_integer_1=__importDefault(require(397)),dayjs_1=__importDefault(require(400)),expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),functionUtils_internal_1=require(195),returnType_1=require(213);class FormatTicks extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.FormatTicks,FormatTicks.evaluator(),returnType_1.ReturnType.String,FormatTicks.validator)}static evaluator(){return functionUtils_1.FunctionUtils.applyWithOptionsAndError((args,options)=>{let error,value,arg=args[0],locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale,format=functionUtils_1.FunctionUtils.DefaultDateTimeFormat;if(functionUtils_1.FunctionUtils.isNumber(arg)&&(arg=big_integer_1.default(arg)),"string"==typeof arg&&(arg=big_integer_1.default(arg)),big_integer_1.default.isInstance(arg)?arg=arg.subtract(functionUtils_internal_1.InternalFunctionUtils.UnixMilliSecondToTicksConstant).divide(functionUtils_internal_1.InternalFunctionUtils.MillisecondToTickConstant).toJSNumber():error=`formatTicks first argument ${arg} is not a number, numeric string or bigInt`,!error&&(({format:format,locale:locale}=functionUtils_1.FunctionUtils.determineFormatAndLocale(args,3,format,locale)),functionUtils_1.FunctionUtils.isNumber(arg))){const dateString=new Date(arg).toISOString();value=dayjs_1.default(dateString).locale(locale).utc().format(format)}return{value:value,error:error}})}static validator(expression){functionUtils_1.FunctionUtils.validateOrder(expression,[returnType_1.ReturnType.String,returnType_1.ReturnType.String],returnType_1.ReturnType.Number)}}exports.FormatTicks=FormatTicks;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdFRpY2tzLmpzIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYmlnX2ludGVnZXJfMSIsInJlcXVpcmUiLCJkYXlqc18xIiwiZXhwcmVzc2lvbkV2YWx1YXRvcl8xIiwiZXhwcmVzc2lvblR5cGVfMSIsImZ1bmN0aW9uVXRpbHNfMSIsImZ1bmN0aW9uVXRpbHNfaW50ZXJuYWxfMSIsInJldHVyblR5cGVfMSIsIkZvcm1hdFRpY2tzIiwiRXhwcmVzc2lvbkV2YWx1YXRvciIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwiRXhwcmVzc2lvblR5cGUiLCJldmFsdWF0b3IiLCJSZXR1cm5UeXBlIiwiU3RyaW5nIiwidmFsaWRhdG9yIiwiRnVuY3Rpb25VdGlscyIsImFwcGx5V2l0aE9wdGlvbnNBbmRFcnJvciIsImFyZ3MiLCJvcHRpb25zIiwiZXJyb3IiLCJhcmciLCJsb2NhbGUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJmb3JtYXQiLCJEZWZhdWx0RGF0ZVRpbWVGb3JtYXQiLCJpc051bWJlciIsImlzSW5zdGFuY2UiLCJzdWJ0cmFjdCIsIkludGVybmFsRnVuY3Rpb25VdGlscyIsIlVuaXhNaWxsaVNlY29uZFRvVGlja3NDb25zdGFudCIsImRpdmlkZSIsIk1pbGxpc2Vjb25kVG9UaWNrQ29uc3RhbnQiLCJ0b0pTTnVtYmVyIiwiZGV0ZXJtaW5lRm9ybWF0QW5kTG9jYWxlIiwiZGF0ZVN0cmluZyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInV0YyIsImV4cHJlc3Npb24iLCJ2YWxpZGF0ZU9yZGVyIiwiTnVtYmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxhQVFBLElBQUlBLGdCQUFtQkMsTUFBUUEsS0FBS0QsaUJBQW9CLFNBQVVFLEtBQzlELE9BQVFBLEtBQU9BLElBQUlDLFdBQWNELElBQU0sQ0FBRUUsUUFBV0YsTUFFeERHLE9BQU9DLGVBQWVDLFFBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELE1BQU1DLGNBQWdCVCxnQkFBZ0JVLFFBQVEsZ0JBQ3hDQyxRQUFVWCxnQkFBZ0JVLFFBQVEsVUFDbENFLHNCQUF3QkYsUUFBUSwwQkFDaENHLGlCQUFtQkgsUUFBUSxxQkFDM0JJLGdCQUFrQkosUUFBUSxvQkFDMUJLLHlCQUEyQkwsUUFBUSw2QkFDbkNNLGFBQWVOLFFBQVEsaUJBSTdCLE1BQU1PLG9CQUFvQkwsc0JBQXNCTSxvQkFJNUNDLGNBQ0lDLE1BQU1QLGlCQUFpQlEsZUFBZUosWUFBYUEsWUFBWUssWUFBYU4sYUFBYU8sV0FBV0MsT0FBUVAsWUFBWVEsV0FLNUhOLG1CQUNJLE9BQU9MLGdCQUFnQlksY0FBY0MseUJBQXlCLENBQUNDLEtBQU1DLFdBQ2pFLElBQUlDLE1Bb0JBdEIsTUFuQkF1QixJQUFNSCxLQUFLLEdBQ1hJLE9BQVNILFFBQVFHLE9BQVNILFFBQVFHLE9BQVNDLEtBQUtDLGlCQUFpQkMsa0JBQWtCSCxPQUNuRkksT0FBU3RCLGdCQUFnQlksY0FBY1csc0JBa0IzQyxHQWpCSXZCLGdCQUFnQlksY0FBY1ksU0FBU1AsT0FDdkNBLElBQU10QixjQUFjTCxRQUFRMkIsTUFFYixpQkFBUkEsTUFDUEEsSUFBTXRCLGNBQWNMLFFBQVEyQixNQUUzQnRCLGNBQWNMLFFBQVFtQyxXQUFXUixLQUtsQ0EsSUFBTUEsSUFDRFMsU0FBU3pCLHlCQUF5QjBCLHNCQUFzQkMsZ0NBQ3hEQyxPQUFPNUIseUJBQXlCMEIsc0JBQXNCRywyQkFDdERDLGFBUExmLG9DQUFzQ0MsaURBVXJDRCxVQUNFTSxPQUFBQSxPQUFRSixPQUFBQSxRQUFXbEIsZ0JBQWdCWSxjQUFjb0IseUJBQXlCbEIsS0FBTSxFQUFHUSxPQUFRSixTQUMxRmxCLGdCQUFnQlksY0FBY1ksU0FBU1AsTUFBTSxDQUM3QyxNQUFNZ0IsV0FBYSxJQUFJQyxLQUFLakIsS0FBS2tCLGNBQ2pDekMsTUFBUUcsUUFBUVAsUUFBUTJDLFlBQVlmLE9BQU9BLFFBQVFrQixNQUFNZCxPQUFPQSxRQUd4RSxNQUFPLENBQUU1QixNQUFBQSxNQUFPc0IsTUFBQUEsU0FPeEJYLGlCQUFpQmdDLFlBQ2JyQyxnQkFBZ0JZLGNBQWMwQixjQUFjRCxXQUFZLENBQUNuQyxhQUFhTyxXQUFXQyxPQUFRUixhQUFhTyxXQUFXQyxRQUFTUixhQUFhTyxXQUFXOEIsU0FHMUo5QyxRQUFRVSxZQUFjQSIsImZpbGUiOiIvaG9tZS92c3RzL3dvcmsvMS9zL2xpYnJhcmllcy9hZGFwdGl2ZS1leHByZXNzaW9ucy9saWIvYnVpbHRpbkZ1bmN0aW9ucy9mb3JtYXRUaWNrcy5qcyJ9