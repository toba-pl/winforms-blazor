"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const dayjs_1=__importDefault(require(400)),timezone_1=__importDefault(require(402));dayjs_1.default.extend(timezone_1.default);const expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),returnType_1=require(213),timeZoneConverter_1=require(214);class ConvertToUTC extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.ConvertToUTC,ConvertToUTC.evaluator,returnType_1.ReturnType.String,ConvertToUTC.validator)}static evaluator(expression,state,options){let value,locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale,format=functionUtils_1.FunctionUtils.DefaultDateTimeFormat;const{args:args,error:childrenError}=functionUtils_1.FunctionUtils.evaluateChildren(expression,state,options);let error=childrenError;return error||(({format:format,locale:locale}=functionUtils_1.FunctionUtils.determineFormatAndLocale(args,4,format,locale)),"string"==typeof args[0]&&"string"==typeof args[1]?({value:value,error:error}=ConvertToUTC.evalConvertToUTC(args[0],args[1],format,locale)):error=`${expression} should contain an ISO format timestamp, a destination time zone string and an optional output format string.`),{value:value,error:error}}static verifyTimeStamp(timeStamp){if("Invalid Date"===dayjs_1.default(timeStamp).toString())return`${timeStamp} is a invalid datetime`}static evalConvertToUTC(timeStamp,sourceTimezone,format,locale){let result,error,formattedSourceTime;const timeZone=timeZoneConverter_1.TimeZoneConverter.windowsToIana(sourceTimezone);if(timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)||(error=`${sourceTimezone} is not a valid timezone`),!error&&!(error=this.verifyTimeStamp(timeStamp))){try{formattedSourceTime=dayjs_1.default.tz(timeStamp,timeZone).format()}catch(e){error=`${timeStamp} with ${timeZone} is not a valid timestamp with specified timeZone:`}if(!error)try{result=dayjs_1.default(formattedSourceTime).locale(locale).tz("Etc/UTC").format(format)}catch(e){error=`${format} is not a valid timestamp format`}}return{value:result,error:error}}static validator(expr){functionUtils_1.FunctionUtils.validateOrder(expr,[returnType_1.ReturnType.String,returnType_1.ReturnType.String],returnType_1.ReturnType.String,returnType_1.ReturnType.String)}}exports.ConvertToUTC=ConvertToUTC;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnZlcnRUb1VUQy5qcyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRheWpzXzEiLCJyZXF1aXJlIiwidGltZXpvbmVfMSIsImV4dGVuZCIsImV4cHJlc3Npb25FdmFsdWF0b3JfMSIsImV4cHJlc3Npb25UeXBlXzEiLCJmdW5jdGlvblV0aWxzXzEiLCJyZXR1cm5UeXBlXzEiLCJ0aW1lWm9uZUNvbnZlcnRlcl8xIiwiQ29udmVydFRvVVRDIiwiRXhwcmVzc2lvbkV2YWx1YXRvciIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwiRXhwcmVzc2lvblR5cGUiLCJldmFsdWF0b3IiLCJSZXR1cm5UeXBlIiwiU3RyaW5nIiwidmFsaWRhdG9yIiwiZXhwcmVzc2lvbiIsInN0YXRlIiwib3B0aW9ucyIsImxvY2FsZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsImZvcm1hdCIsIkZ1bmN0aW9uVXRpbHMiLCJEZWZhdWx0RGF0ZVRpbWVGb3JtYXQiLCJhcmdzIiwiZXJyb3IiLCJjaGlsZHJlbkVycm9yIiwiZXZhbHVhdGVDaGlsZHJlbiIsImRldGVybWluZUZvcm1hdEFuZExvY2FsZSIsImV2YWxDb252ZXJ0VG9VVEMiLCJ0aW1lU3RhbXAiLCJ0b1N0cmluZyIsInNvdXJjZVRpbWV6b25lIiwicmVzdWx0IiwiZm9ybWF0dGVkU291cmNlVGltZSIsInRpbWVab25lIiwiVGltZVpvbmVDb252ZXJ0ZXIiLCJ3aW5kb3dzVG9JYW5hIiwidmVyaWZ5VGltZVpvbmVTdHIiLCJ2ZXJpZnlUaW1lU3RhbXAiLCJ0eiIsImUiLCJleHByIiwidmFsaWRhdGVPcmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsYUFRQSxJQUFJQSxnQkFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxLQUM5RCxPQUFRQSxLQUFPQSxJQUFJQyxXQUFjRCxJQUFNLENBQUVFLFFBQVdGLE1BRXhERyxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxRQUFVVCxnQkFBZ0JVLFFBQVEsVUFDbENDLFdBQWFYLGdCQUFnQlUsUUFBUSwwQkFDM0NELFFBQVFMLFFBQVFRLE9BQU9ELFdBQVdQLFNBQ2xDLE1BQU1TLHNCQUF3QkgsUUFBUSwwQkFDaENJLGlCQUFtQkosUUFBUSxxQkFDM0JLLGdCQUFrQkwsUUFBUSxvQkFDMUJNLGFBQWVOLFFBQVEsaUJBQ3ZCTyxvQkFBc0JQLFFBQVEsd0JBSXBDLE1BQU1RLHFCQUFxQkwsc0JBQXNCTSxvQkFJN0NDLGNBQ0lDLE1BQU1QLGlCQUFpQlEsZUFBZUosYUFBY0EsYUFBYUssVUFBV1AsYUFBYVEsV0FBV0MsT0FBUVAsYUFBYVEsV0FLN0hOLGlCQUFpQk8sV0FBWUMsTUFBT0MsU0FDaEMsSUFBSXJCLE1BQ0FzQixPQUFTRCxRQUFRQyxPQUFTRCxRQUFRQyxPQUFTQyxLQUFLQyxpQkFBaUJDLGtCQUFrQkgsT0FDbkZJLE9BQVNuQixnQkFBZ0JvQixjQUFjQyxzQkFDM0MsTUFBTUMsS0FBRUEsS0FBTUMsTUFBT0MsZUFBa0J4QixnQkFBZ0JvQixjQUFjSyxpQkFBaUJiLFdBQVlDLE1BQU9DLFNBQ3pHLElBQUlTLE1BQVFDLGNBVVosT0FUS0QsVUFDRUosT0FBQUEsT0FBUUosT0FBQUEsUUFBV2YsZ0JBQWdCb0IsY0FBY00seUJBQXlCSixLQUFNLEVBQUdILE9BQVFKLFNBQ3ZFLGlCQUFaTyxLQUFLLElBQXNDLGlCQUFaQSxLQUFLLEtBQ3hDN0IsTUFBQUEsTUFBTzhCLE1BQUFBLE9BQVVwQixhQUFhd0IsaUJBQWlCTCxLQUFLLEdBQUlBLEtBQUssR0FBSUgsT0FBUUosU0FHNUVRLFNBQVdYLDJIQUdaLENBQUVuQixNQUFBQSxNQUFPOEIsTUFBQUEsT0FLcEJsQix1QkFBdUJ1QixXQUVuQixHQUEwQixpQkFEWGxDLFFBQVFMLFFBQVF1QyxXQUNwQkMsV0FDUCxTQUFVRCxrQ0FPbEJ2Qix3QkFBd0J1QixVQUFXRSxlQUFnQlgsT0FBUUosUUFDdkQsSUFBSWdCLE9BQ0FSLE1BQ0FTLG9CQUNKLE1BQU1DLFNBQVcvQixvQkFBb0JnQyxrQkFBa0JDLGNBQWNMLGdCQUlyRSxHQUhLNUIsb0JBQW9CZ0Msa0JBQWtCRSxrQkFBa0JILFlBQ3pEVixTQUFXTywyQ0FFVlAsU0FDREEsTUFBUXJDLEtBQUttRCxnQkFBZ0JULFlBQ2pCLENBQ1IsSUFFSUksb0JBRG1CdEMsUUFBUUwsUUFBUWlELEdBQUdWLFVBQVdLLFVBQ2hCZCxTQUVyQyxNQUFPb0IsR0FDSGhCLFNBQVdLLGtCQUFrQkssNkRBRWpDLElBQUtWLE1BQ0QsSUFDSVEsT0FBU3JDLFFBQVFMLFFBQVEyQyxxQkFBcUJqQixPQUFPQSxRQUFRdUIsR0FBRyxXQUFXbkIsT0FBT0EsUUFFdEYsTUFBT29CLEdBQ0hoQixTQUFXSiwwQ0FLM0IsTUFBTyxDQUFFMUIsTUFBT3NDLE9BQVFSLE1BQUFBLE9BSzVCbEIsaUJBQWlCbUMsTUFDYnhDLGdCQUFnQm9CLGNBQWNxQixjQUFjRCxLQUFNLENBQUN2QyxhQUFhUSxXQUFXQyxPQUFRVCxhQUFhUSxXQUFXQyxRQUFTVCxhQUFhUSxXQUFXQyxPQUFRVCxhQUFhUSxXQUFXQyxTQUdwTGxCLFFBQVFXLGFBQWVBIiwiZmlsZSI6Ii9ob21lL3ZzdHMvd29yay8xL3MvbGlicmFyaWVzL2FkYXB0aXZlLWV4cHJlc3Npb25zL2xpYi9idWlsdGluRnVuY3Rpb25zL2NvbnZlcnRUb1VUQy5qcyJ9