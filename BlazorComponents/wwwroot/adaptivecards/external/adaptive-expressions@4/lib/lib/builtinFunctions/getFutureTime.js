"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const dayjs_1=__importDefault(require(400)),utc_1=__importDefault(require(403));dayjs_1.default.extend(utc_1.default);const expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),functionUtils_internal_1=require(195),returnType_1=require(213);class GetFutureTime extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.GetFutureTime,GetFutureTime.evaluator,returnType_1.ReturnType.String,GetFutureTime.validator)}static evaluator(expression,state,options){let value,locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale,format=functionUtils_1.FunctionUtils.DefaultDateTimeFormat;const{args:args,error:childrenError}=functionUtils_1.FunctionUtils.evaluateChildren(expression,state,options);let error=childrenError;if(!error)if(Number.isInteger(args[0])&&"string"==typeof args[1]){({format:format,locale:locale}=functionUtils_1.FunctionUtils.determineFormatAndLocale(args,4,format,locale));const{duration:duration,tsStr:tsStr}=functionUtils_internal_1.InternalFunctionUtils.timeUnitTransformer(args[0],args[1]);void 0===tsStr?error=`${args[2]} is not a valid time unit.`:value=dayjs_1.default().locale(locale).utc().add(duration,tsStr).format(format)}else error=`${expression} should contain a time interval integer, a string unit of time and an optional output format string.`;return{value:value,error:error}}static validator(expression){functionUtils_1.FunctionUtils.validateOrder(expression,[returnType_1.ReturnType.String,returnType_1.ReturnType.String],returnType_1.ReturnType.Number,returnType_1.ReturnType.String)}}exports.GetFutureTime=GetFutureTime;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEZ1dHVyZVRpbWUuanMiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkYXlqc18xIiwicmVxdWlyZSIsInV0Y18xIiwiZXh0ZW5kIiwiZXhwcmVzc2lvbkV2YWx1YXRvcl8xIiwiZXhwcmVzc2lvblR5cGVfMSIsImZ1bmN0aW9uVXRpbHNfMSIsImZ1bmN0aW9uVXRpbHNfaW50ZXJuYWxfMSIsInJldHVyblR5cGVfMSIsIkdldEZ1dHVyZVRpbWUiLCJFeHByZXNzaW9uRXZhbHVhdG9yIiwiW29iamVjdCBPYmplY3RdIiwic3VwZXIiLCJFeHByZXNzaW9uVHlwZSIsImV2YWx1YXRvciIsIlJldHVyblR5cGUiLCJTdHJpbmciLCJ2YWxpZGF0b3IiLCJleHByZXNzaW9uIiwic3RhdGUiLCJvcHRpb25zIiwibG9jYWxlIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwicmVzb2x2ZWRPcHRpb25zIiwiZm9ybWF0IiwiRnVuY3Rpb25VdGlscyIsIkRlZmF1bHREYXRlVGltZUZvcm1hdCIsImFyZ3MiLCJlcnJvciIsImNoaWxkcmVuRXJyb3IiLCJldmFsdWF0ZUNoaWxkcmVuIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZGV0ZXJtaW5lRm9ybWF0QW5kTG9jYWxlIiwiZHVyYXRpb24iLCJ0c1N0ciIsIkludGVybmFsRnVuY3Rpb25VdGlscyIsInRpbWVVbml0VHJhbnNmb3JtZXIiLCJ1bmRlZmluZWQiLCJ1dGMiLCJhZGQiLCJ2YWxpZGF0ZU9yZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxhQVFBLElBQUlBLGdCQUFtQkMsTUFBUUEsS0FBS0QsaUJBQW9CLFNBQVVFLEtBQzlELE9BQVFBLEtBQU9BLElBQUlDLFdBQWNELElBQU0sQ0FBRUUsUUFBV0YsTUFFeERHLE9BQU9DLGVBQWVDLFFBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELE1BQU1DLFFBQVVULGdCQUFnQlUsUUFBUSxVQUNsQ0MsTUFBUVgsZ0JBQWdCVSxRQUFRLHFCQUN0Q0QsUUFBUUwsUUFBUVEsT0FBT0QsTUFBTVAsU0FDN0IsTUFBTVMsc0JBQXdCSCxRQUFRLDBCQUNoQ0ksaUJBQW1CSixRQUFRLHFCQUMzQkssZ0JBQWtCTCxRQUFRLG9CQUMxQk0seUJBQTJCTixRQUFRLDZCQUNuQ08sYUFBZVAsUUFBUSxpQkFJN0IsTUFBTVEsc0JBQXNCTCxzQkFBc0JNLG9CQUk5Q0MsY0FDSUMsTUFBTVAsaUJBQWlCUSxlQUFlSixjQUFlQSxjQUFjSyxVQUFXTixhQUFhTyxXQUFXQyxPQUFRUCxjQUFjUSxXQUtoSU4saUJBQWlCTyxXQUFZQyxNQUFPQyxTQUNoQyxJQUFJckIsTUFDQXNCLE9BQVNELFFBQVFDLE9BQVNELFFBQVFDLE9BQVNDLEtBQUtDLGlCQUFpQkMsa0JBQWtCSCxPQUNuRkksT0FBU25CLGdCQUFnQm9CLGNBQWNDLHNCQUMzQyxNQUFNQyxLQUFFQSxLQUFNQyxNQUFPQyxlQUFrQnhCLGdCQUFnQm9CLGNBQWNLLGlCQUFpQmIsV0FBWUMsTUFBT0MsU0FDekcsSUFBSVMsTUFBUUMsY0FDWixJQUFLRCxNQUNELEdBQUlHLE9BQU9DLFVBQVVMLEtBQUssS0FBMEIsaUJBQVpBLEtBQUssR0FBaUIsR0FDdkRILE9BQUFBLE9BQVFKLE9BQUFBLFFBQVdmLGdCQUFnQm9CLGNBQWNRLHlCQUF5Qk4sS0FBTSxFQUFHSCxPQUFRSixTQUM5RixNQUFNYyxTQUFFQSxTQUFRQyxNQUFFQSxPQUFVN0IseUJBQXlCOEIsc0JBQXNCQyxvQkFBb0JWLEtBQUssR0FBSUEsS0FBSyxTQUMvRlcsSUFBVkgsTUFDQVAsU0FBV0QsS0FBSywrQkFHaEI3QixNQUFRQyxRQUFRTCxVQUFVMEIsT0FBT0EsUUFBUW1CLE1BQU1DLElBQUlOLFNBQVVDLE9BQU9YLE9BQU9BLGFBSS9FSSxTQUFXWCxpSEFHbkIsTUFBTyxDQUFFbkIsTUFBQUEsTUFBTzhCLE1BQUFBLE9BS3BCbEIsaUJBQWlCTyxZQUNiWixnQkFBZ0JvQixjQUFjZ0IsY0FBY3hCLFdBQVksQ0FBQ1YsYUFBYU8sV0FBV0MsT0FBUVIsYUFBYU8sV0FBV0MsUUFBU1IsYUFBYU8sV0FBV2lCLE9BQVF4QixhQUFhTyxXQUFXQyxTQUcxTGxCLFFBQVFXLGNBQWdCQSIsImZpbGUiOiIvaG9tZS92c3RzL3dvcmsvMS9zL2xpYnJhcmllcy9hZGFwdGl2ZS1leHByZXNzaW9ucy9saWIvYnVpbHRpbkZ1bmN0aW9ucy9nZXRGdXR1cmVUaW1lLmpzIn0=