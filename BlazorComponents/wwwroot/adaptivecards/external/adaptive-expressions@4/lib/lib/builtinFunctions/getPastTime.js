"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const dayjs_1=__importDefault(require(400)),utc_1=__importDefault(require(403));dayjs_1.default.extend(utc_1.default);const expressionEvaluator_1=require(180),expressionType_1=require(192),functionUtils_1=require(196),functionUtils_internal_1=require(195),returnType_1=require(213);class GetPastTime extends expressionEvaluator_1.ExpressionEvaluator{constructor(){super(expressionType_1.ExpressionType.GetPastTime,GetPastTime.evaluator,returnType_1.ReturnType.String,GetPastTime.validator)}static evaluator(expression,state,options){let value,locale=options.locale?options.locale:Intl.DateTimeFormat().resolvedOptions().locale,format=functionUtils_1.FunctionUtils.DefaultDateTimeFormat;const{args:args,error:childrenError}=functionUtils_1.FunctionUtils.evaluateChildren(expression,state,options);let error=childrenError;if(!error)if(Number.isInteger(args[0])&&"string"==typeof args[1]){({format:format,locale:locale}=functionUtils_1.FunctionUtils.determineFormatAndLocale(args,4,format,locale));const{duration:duration,tsStr:tsStr}=functionUtils_internal_1.InternalFunctionUtils.timeUnitTransformer(args[0],args[1]);void 0===tsStr?error=`${args[2]} is not a valid time unit.`:value=dayjs_1.default().locale(locale).utc().subtract(duration,tsStr).format(format)}else error=`${expression} should contain a time interval integer, a string unit of time and an optional output format string.`;return{value:value,error:error}}static validator(expression){functionUtils_1.FunctionUtils.validateOrder(expression,[returnType_1.ReturnType.String,returnType_1.ReturnType.String],returnType_1.ReturnType.Number,returnType_1.ReturnType.String)}}exports.GetPastTime=GetPastTime;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFBhc3RUaW1lLmpzIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGF5anNfMSIsInJlcXVpcmUiLCJ1dGNfMSIsImV4dGVuZCIsImV4cHJlc3Npb25FdmFsdWF0b3JfMSIsImV4cHJlc3Npb25UeXBlXzEiLCJmdW5jdGlvblV0aWxzXzEiLCJmdW5jdGlvblV0aWxzX2ludGVybmFsXzEiLCJyZXR1cm5UeXBlXzEiLCJHZXRQYXN0VGltZSIsIkV4cHJlc3Npb25FdmFsdWF0b3IiLCJbb2JqZWN0IE9iamVjdF0iLCJzdXBlciIsIkV4cHJlc3Npb25UeXBlIiwiZXZhbHVhdG9yIiwiUmV0dXJuVHlwZSIsIlN0cmluZyIsInZhbGlkYXRvciIsImV4cHJlc3Npb24iLCJzdGF0ZSIsIm9wdGlvbnMiLCJsb2NhbGUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJmb3JtYXQiLCJGdW5jdGlvblV0aWxzIiwiRGVmYXVsdERhdGVUaW1lRm9ybWF0IiwiYXJncyIsImVycm9yIiwiY2hpbGRyZW5FcnJvciIsImV2YWx1YXRlQ2hpbGRyZW4iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJkZXRlcm1pbmVGb3JtYXRBbmRMb2NhbGUiLCJkdXJhdGlvbiIsInRzU3RyIiwiSW50ZXJuYWxGdW5jdGlvblV0aWxzIiwidGltZVVuaXRUcmFuc2Zvcm1lciIsInVuZGVmaW5lZCIsInV0YyIsInN1YnRyYWN0IiwidmFsaWRhdGVPcmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsYUFRQSxJQUFJQSxnQkFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxLQUM5RCxPQUFRQSxLQUFPQSxJQUFJQyxXQUFjRCxJQUFNLENBQUVFLFFBQVdGLE1BRXhERyxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxRQUFVVCxnQkFBZ0JVLFFBQVEsVUFDbENDLE1BQVFYLGdCQUFnQlUsUUFBUSxxQkFDdENELFFBQVFMLFFBQVFRLE9BQU9ELE1BQU1QLFNBQzdCLE1BQU1TLHNCQUF3QkgsUUFBUSwwQkFDaENJLGlCQUFtQkosUUFBUSxxQkFDM0JLLGdCQUFrQkwsUUFBUSxvQkFDMUJNLHlCQUEyQk4sUUFBUSw2QkFDbkNPLGFBQWVQLFFBQVEsaUJBSTdCLE1BQU1RLG9CQUFvQkwsc0JBQXNCTSxvQkFJNUNDLGNBQ0lDLE1BQU1QLGlCQUFpQlEsZUFBZUosWUFBYUEsWUFBWUssVUFBV04sYUFBYU8sV0FBV0MsT0FBUVAsWUFBWVEsV0FLMUhOLGlCQUFpQk8sV0FBWUMsTUFBT0MsU0FDaEMsSUFBSXJCLE1BQ0FzQixPQUFTRCxRQUFRQyxPQUFTRCxRQUFRQyxPQUFTQyxLQUFLQyxpQkFBaUJDLGtCQUFrQkgsT0FDbkZJLE9BQVNuQixnQkFBZ0JvQixjQUFjQyxzQkFDM0MsTUFBTUMsS0FBRUEsS0FBTUMsTUFBT0MsZUFBa0J4QixnQkFBZ0JvQixjQUFjSyxpQkFBaUJiLFdBQVlDLE1BQU9DLFNBQ3pHLElBQUlTLE1BQVFDLGNBQ1osSUFBS0QsTUFDRCxHQUFJRyxPQUFPQyxVQUFVTCxLQUFLLEtBQTBCLGlCQUFaQSxLQUFLLEdBQWlCLEdBQ3ZESCxPQUFBQSxPQUFRSixPQUFBQSxRQUFXZixnQkFBZ0JvQixjQUFjUSx5QkFBeUJOLEtBQU0sRUFBR0gsT0FBUUosU0FDOUYsTUFBTWMsU0FBRUEsU0FBUUMsTUFBRUEsT0FBVTdCLHlCQUF5QjhCLHNCQUFzQkMsb0JBQW9CVixLQUFLLEdBQUlBLEtBQUssU0FDL0ZXLElBQVZILE1BQ0FQLFNBQVdELEtBQUssK0JBR2hCN0IsTUFBUUMsUUFBUUwsVUFBVTBCLE9BQU9BLFFBQVFtQixNQUFNQyxTQUFTTixTQUFVQyxPQUFPWCxPQUFPQSxhQUlwRkksU0FBV1gsaUhBR25CLE1BQU8sQ0FBRW5CLE1BQUFBLE1BQU84QixNQUFBQSxPQUtwQmxCLGlCQUFpQk8sWUFDYlosZ0JBQWdCb0IsY0FBY2dCLGNBQWN4QixXQUFZLENBQUNWLGFBQWFPLFdBQVdDLE9BQVFSLGFBQWFPLFdBQVdDLFFBQVNSLGFBQWFPLFdBQVdpQixPQUFReEIsYUFBYU8sV0FBV0MsU0FHMUxsQixRQUFRVyxZQUFjQSIsImZpbGUiOiIvaG9tZS92c3RzL3dvcmsvMS9zL2xpYnJhcmllcy9hZGFwdGl2ZS1leHByZXNzaW9ucy9saWIvYnVpbHRpbkZ1bmN0aW9ucy9nZXRQYXN0VGltZS5qcyJ9