"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const constant_1=require(167),dayjs_1=__importDefault(require(400)),utc_1=__importDefault(require(403));dayjs_1.default.extend(utc_1.default);const expressionType_1=require(192),memory_1=require(201),recognizers_text_data_types_timex_expression_1=require(222),bigInt=require(397);class InternalFunctionUtils{static parseTimexProperty(timexExpr){let parsed;if(timexExpr instanceof recognizers_text_data_types_timex_expression_1.TimexProperty)parsed=timexExpr;else if("string"==typeof timexExpr)parsed=new recognizers_text_data_types_timex_expression_1.TimexProperty(timexExpr);else if(void 0===(parsed=new recognizers_text_data_types_timex_expression_1.TimexProperty(timexExpr))||0===Object.keys(parsed).length)return{timexProperty:parsed,error:`${timexExpr} requires a TimexProperty or a string as a argument`};return{timexProperty:parsed,error:void 0}}static sortBy(isDescending){return(expression,state,options)=>{let result;const{value:oriArr,error:childrenError}=expression.children[0].tryEvaluate(state,options);let error=childrenError;if(!error)if(Array.isArray(oriArr)){const arr=oriArr.slice(0);if(1===expression.children.length)result=isDescending?arr.sort().reverse():arr.sort();else{let propertyName;({value:propertyName,error:error}=expression.children[1].tryEvaluate(state,options)),error||(propertyName=propertyName||""),result=isDescending?arr.sort(InternalFunctionUtils.sortByKey(propertyName)).reverse():arr.sort(InternalFunctionUtils.sortByKey(propertyName))}}else error=`${expression.children[0]} is not an array`;return{value:result,error:error}}}static accessIndex(instance,index){if(null==instance)return{value:void 0,error:void 0};let value,error;return Array.isArray(instance)?index>=0&&index<instance.length?value=instance[index]:error=`${index} is out of range for ${instance}`:error=`${instance} is not a collection.`,{value:value,error:error}}static verifyTimestamp(value){let error;try{const parsedData=new Date(value);Number.isNaN(parsedData.getTime())&&(error=`${value} is not a valid datetime string.`)}catch(e){error=`${value} is not a valid datetime string.`}return error}static verifyISOTimestamp(value){let error;try{const parsedData=new Date(value);Number.isNaN(parsedData.getTime())?error=`${value} is not a valid datetime string.`:parsedData.toISOString()!==value&&(error=`${value} is not a ISO format datetime string.`)}catch(e){error=`${value} is not a valid datetime string.`}return error}static ticks(timeStamp){let result;const error=this.verifyISOTimestamp(timeStamp);if(!error){const unixMilliSec=dayjs_1.default(timeStamp).utc().valueOf();result=this.UnixMilliSecondToTicksConstant.add(bigInt(unixMilliSec).times(this.MillisecondToTickConstant))}return{value:result,error:error}}static accessProperty(instance,property){if(!instance)return{value:void 0,error:void 0};let value;if(instance instanceof Map&&void 0!==instance){const instanceMap=instance;if(void 0===(value=instanceMap.get(property))){const prop=Array.from(instanceMap.keys()).find(k=>k.toLowerCase()===property.toLowerCase());void 0!==prop&&(value=instanceMap.get(prop))}}else{const prop=Object.keys(instance).find(k=>k.toLowerCase()===property.toLowerCase());void 0!==prop&&(value=instance[prop])}return{value:value,error:void 0}}static wrapGetValue(state,path,options){const result=state.getValue(path);return void 0!==result?result:void 0!==options.nullSubstitution?options.nullSubstitution(path):void 0}static parseStringOrUndefined(input){return"string"==typeof input?input:""}static isLogicTrue(instance){let result=!0;return"boolean"==typeof instance?result=instance:null==instance&&(result=!1),result}static foreach(expression,state,options){let result;const{value:instance,error:childrenError}=expression.children[0].tryEvaluate(state,options);let error=childrenError;if(instance||(error=`'${expression.children[0]}' evaluated to null.`),!error){const list=InternalFunctionUtils.convertToList(instance);list?(result=[],InternalFunctionUtils.lambdaEvaluator(expression,state,options,list,(currentItem,r,e)=>e?(error=e,!0):(result.push(r),!1))):error=`${expression.children[0]} is not a collection or structure object to run Foreach`}return{value:result,error:error}}static lambdaEvaluator(expression,state,options,list,callback){const firstChild=expression.children[1].children[0];if(!(firstChild instanceof constant_1.Constant)||"string"!=typeof firstChild.value)return;const iteratorName=firstChild.value,stackedMemory=memory_1.StackedMemory.wrap(state);for(const item of list){const currentItem=item,local=new Map([[iteratorName,item]]);stackedMemory.push(memory_1.SimpleObjectMemory.wrap(local));const{value:r,error:e}=expression.children[2].tryEvaluate(stackedMemory,options);if(stackedMemory.pop(),callback(currentItem,r,e))break}}static convertToList(instance){let arr;return Array.isArray(instance)?arr=instance:"object"==typeof instance&&(arr=[],Object.keys(instance).forEach(u=>arr.push({key:u,value:instance[u]}))),arr}static ValidateLambdaExpression(expression){if(3!==expression.children.length)throw new Error(`Lambda expression expect 3 parameters, found ${expression.children.length}`);const second=expression.children[1];if(second.type!==expressionType_1.ExpressionType.Accessor||1!==second.children.length)throw new Error(`Second parameter is not an identifier : ${second}`)}static parseUri(uri){let result,error;try{result=new URL(uri)}catch(e){error=`Invalid URI: ${uri}`}return{value:result,error:error}}static timeUnitTransformer(duration,cSharpStr){switch(cSharpStr){case"Day":return{duration:duration,tsStr:"day"};case"Week":return{duration:7*duration,tsStr:"day"};case"Second":return{duration:duration,tsStr:"second"};case"Minute":return{duration:duration,tsStr:"minute"};case"Hour":return{duration:duration,tsStr:"hour"};case"Month":return{duration:duration,tsStr:"month"};case"Year":return{duration:duration,tsStr:"year"};default:return{duration:duration,tsStr:void 0}}}static getTextEncoder(){if("undefined"!=typeof window||"undefined"!=typeof self)return new TextEncoder;return new(require(436).TextEncoder)}static getTextDecoder(code="utf-8"){if("undefined"!=typeof window||"undefined"!=typeof self)return new TextDecoder(code);return new(require(436).TextDecoder)(code)}static commonStringify(input){return null==input?"":"object"==typeof input?JSON.stringify(input).replace(/(^['"]*)/g,"").replace(/(['"]*$)/g,""):input.toString()}static sortByKey(key){return(a,b)=>a[key]>b[key]?1:b[key]>a[key]?-1:0}}InternalFunctionUtils.UnixMilliSecondToTicksConstant=bigInt("621355968000000000"),InternalFunctionUtils.MillisecondToTickConstant=bigInt("10000"),exports.InternalFunctionUtils=InternalFunctionUtils;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,