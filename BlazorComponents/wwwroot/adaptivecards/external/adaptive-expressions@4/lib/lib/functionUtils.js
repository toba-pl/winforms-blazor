"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const datetimeFormatConverter_1=require(178),expressionType_1=require(192),returnType_1=require(213),lodash_isequal_1=__importDefault(require(428));class FunctionUtils{static validateArityAndAnyType(expression,minArity,maxArity,returnType=returnType_1.ReturnType.Object){if(expression.children.length<minArity)throw new Error(`${expression} should have at least ${minArity} children.`);if(expression.children.length>maxArity)throw new Error(`${expression} can't have more than ${maxArity} children.`);if(0==(returnType&returnType_1.ReturnType.Object))for(const child of expression.children)if(0==(child.returnType&returnType_1.ReturnType.Object)&&0==(returnType&child.returnType))throw new Error(FunctionUtils.buildTypeValidatorError(returnType,child,expression))}static validateOrder(expression,optional,...types){if(void 0===optional&&(optional=[]),expression.children.length<types.length||expression.children.length>types.length+optional.length)throw new Error(0===optional.length?`${expression} should have ${types.length} children.`:`${expression} should have between ${types.length} and ${types.length+optional.length} children.`);for(let i=0;i<types.length;i++){const child=expression.children[i],type=types[i];if(0==(type&returnType_1.ReturnType.Object)&&0==(child.returnType&returnType_1.ReturnType.Object)&&0==(type&child.returnType))throw new Error(FunctionUtils.buildTypeValidatorError(type,child,expression))}for(let i=0;i<optional.length;i++){const ic=i+types.length;if(ic>=expression.children.length)break;const child=expression.children[ic],type=optional[i];if(0==(type&returnType_1.ReturnType.Object)&&0==(child.returnType&returnType_1.ReturnType.Object)&&0==(type&child.returnType))throw new Error(FunctionUtils.buildTypeValidatorError(type,child,expression))}}static validateAtLeastOne(expression){FunctionUtils.validateArityAndAnyType(expression,1,Number.MAX_SAFE_INTEGER)}static validateNumber(expression){FunctionUtils.validateArityAndAnyType(expression,1,Number.MAX_SAFE_INTEGER,returnType_1.ReturnType.Number)}static validateString(expression){FunctionUtils.validateArityAndAnyType(expression,1,Number.MAX_SAFE_INTEGER,returnType_1.ReturnType.String)}static validateBinary(expression){FunctionUtils.validateArityAndAnyType(expression,2,2)}static validateBinaryNumber(expression){FunctionUtils.validateArityAndAnyType(expression,2,2,returnType_1.ReturnType.Number)}static validateUnaryOrBinaryNumber(expression){FunctionUtils.validateArityAndAnyType(expression,1,2,returnType_1.ReturnType.Number)}static validateTwoOrMoreThanTwoNumbers(expression){FunctionUtils.validateArityAndAnyType(expression,2,Number.MAX_VALUE,returnType_1.ReturnType.Number)}static validateBinaryNumberOrString(expression){FunctionUtils.validateArityAndAnyType(expression,2,2,returnType_1.ReturnType.Number|returnType_1.ReturnType.String)}static validateUnary(expression){FunctionUtils.validateArityAndAnyType(expression,1,1)}static validateUnaryNumber(expression){FunctionUtils.validateArityAndAnyType(expression,1,1,returnType_1.ReturnType.Number)}static validateUnaryString(expression){FunctionUtils.validateArityAndAnyType(expression,1,1,returnType_1.ReturnType.String)}static validateUnaryOrBinaryString(expression){FunctionUtils.validateArityAndAnyType(expression,1,2,returnType_1.ReturnType.String)}static validateUnaryBoolean(expression){FunctionUtils.validateOrder(expression,void 0,returnType_1.ReturnType.Boolean)}static verifyNumber(value,expression,_){let error;return FunctionUtils.isNumber(value)||(error=`${expression} is not a number.`),error}static verifyNumberOrNumericList(value,expression,_){let error;if(FunctionUtils.isNumber(value))return error;if(Array.isArray(value)){for(const elt of value)if(!FunctionUtils.isNumber(elt)){error=`${elt} is not a number in ${expression}.`;break}}else error=`${expression} is neither a list nor a number.`;return error}static verifyNumericList(value,expression,_){let error;if(Array.isArray(value)){for(const elt of value)if(!FunctionUtils.isNumber(elt)){error=`${elt} is not a number in ${expression}.`;break}}else error=`${expression} is not a list.`;return error}static verifyContainer(value,expression,_){let error;return"string"==typeof value||Array.isArray(value)||value instanceof Map||"object"==typeof value||(error=`${expression} must be a string, list, map or object.`),error}static verifyContainerOrNull(value,expression,_){let error;return null==value||"string"==typeof value||Array.isArray(value)||value instanceof Map||"object"==typeof value||(error=`${expression} must be a string, list, map or object.`),error}static verifyNotNull(value,expression,_){let error;return null==value&&(error=`${expression} is null.`),error}static verifyInteger(value,expression,_){let error;return Number.isInteger(value)||(error=`${expression} is not a integer.`),error}static verifyList(value,expression){let error;return Array.isArray(value)||(error=`${expression} is not a list or array.`),error}static verifyString(value,expression,_){let error;return"string"!=typeof value&&(error=`${expression} is not a string.`),error}static verifyStringOrNull(value,expression,_){let error;return"string"!=typeof value&&void 0!==value&&(error=`${expression} is neither a string nor a null object.`),error}static verifyNumberOrStringOrNull(value,expression,_){let error;return"string"==typeof value||void 0===value||FunctionUtils.isNumber(value)||(error=`${expression} is neither a number nor string`),error}static verifyNumberOrString(value,expression,_){let error;return(void 0===value||!FunctionUtils.isNumber(value)&&"string"!=typeof value)&&(error=`${expression} is not string or number.`),error}static verifyBoolean(value,expression,_){let error;return"boolean"!=typeof value&&(error=`${expression} is not a boolean.`),error}static evaluateChildren(expression,state,options,verify){const args=[];let value,error,pos=0;for(const child of expression.children){if(({value:value,error:error}=child.tryEvaluate(state,options)),error)break;if(void 0!==verify&&(error=verify(value,child,pos)),error)break;args.push(value),++pos}return{args:args,error:error}}static apply(func,verify){return(expression,state,options)=>{let value;const{args:args,error:childrenError}=FunctionUtils.evaluateChildren(expression,state,options,verify);let error=childrenError;if(!error)try{value=func(args)}catch(e){error=e.message}return{value:value,error:error}}}static applyWithError(func,verify){return(expression,state,options)=>{let value;const{args:args,error:childrenError}=FunctionUtils.evaluateChildren(expression,state,options,verify);let error=childrenError;if(!error)try{({value:value,error:error}=func(args))}catch(e){error=e.message}return{value:value,error:error}}}static applyWithOptionsAndError(func,verify){return(expression,state,options)=>{let value;const{args:args,error:childrenError}=FunctionUtils.evaluateChildren(expression,state,options,verify);let error=childrenError;if(!error)try{({value:value,error:error}=func(args,options))}catch(e){error=e.message}return{value:value,error:error}}}static applyWithOptions(func,verify){return(expression,state,options)=>{let value;const{args:args,error:childrenError}=FunctionUtils.evaluateChildren(expression,state,options,verify);let error=childrenError;if(!error)try{value=func(args,options)}catch(e){error=e.message}return{value:value,error:error}}}static applySequence(func,verify){return FunctionUtils.apply(args=>{const binaryArgs=[void 0,void 0];let soFar=args[0];for(let i=1;i<args.length;i++)binaryArgs[0]=soFar,binaryArgs[1]=args[i],soFar=func(binaryArgs);return soFar},verify)}static applySequenceWithError(func,verify){return FunctionUtils.applyWithError(args=>{const binaryArgs=[void 0,void 0];let value,error,soFar=args[0];for(let i=1;i<args.length;i++){if(binaryArgs[0]=soFar,binaryArgs[1]=args[i],({value:value,error:error}=func(binaryArgs)),error)return{value:value,error:error};soFar=value}return{value:soFar,error:void 0}},verify)}static determineLocale(args,maxArgsLength,locale="en-us"){if(args.length===maxArgsLength){const lastArg=args[maxArgsLength-1];"string"==typeof lastArg&&(locale=lastArg)}return locale}static determineFormatAndLocale(args,maxArgsLength,format,locale="en-us"){if(maxArgsLength>=2)if(args.length===maxArgsLength){const lastArg=args[maxArgsLength-1],secondLastArg=args[maxArgsLength-2];"string"==typeof lastArg&&"string"==typeof secondLastArg&&(format=""!==secondLastArg?FunctionUtils.timestampFormatter(secondLastArg):FunctionUtils.DefaultDateTimeFormat,locale=lastArg.substr(0,2))}else if(args.length===maxArgsLength-1){const lastArg=args[maxArgsLength-2];"string"==typeof lastArg&&(format=FunctionUtils.timestampFormatter(lastArg))}return{format:format,locale:locale}}static timestampFormatter(formatter){if(!formatter)return FunctionUtils.DefaultDateTimeFormat;let result=formatter;try{result=datetimeFormatConverter_1.convertCSharpDateTimeToDayjs(formatter)}catch(e){}return result}static tryAccumulatePath(expression,state,options){let path="",left=expression;for(;void 0!==left;)if(left.type===expressionType_1.ExpressionType.Accessor)path=left.children[0].value+"."+path,left=2===left.children.length?left.children[1]:void 0;else{if(left.type!==expressionType_1.ExpressionType.Element)break;{const{value:value,error:error}=left.children[1].tryEvaluate(state,options);if(void 0!==error)return{path:void 0,left:void 0,error:error};if(FunctionUtils.isNumber(parseInt(value)))path=`[${value}].${path}`;else{if("string"!=typeof value)return{path:void 0,left:void 0,error:`${left.children[1].toString()} doesn't return an int or string`};path=`['${value}'].${path}`}left=left.children[0]}}return""===(path=path.replace(/(\.*$)/g,"").replace(/(\.\[)/g,"["))&&(path=void 0),{path:path,left:left,error:void 0}}static isNumber(instance){return null!=instance&&"number"==typeof instance&&!Number.isNaN(instance)}static commonEquals(obj1,obj2){if(null==obj1||null==obj2)return null==obj1&&null==obj2;if(Array.isArray(obj1)&&Array.isArray(obj2))return obj1.length===obj2.length&&obj1.every((item,i)=>FunctionUtils.commonEquals(item,obj2[i]));const propertyCountOfObj1=FunctionUtils.getPropertyCount(obj1),propertyCountOfObj2=FunctionUtils.getPropertyCount(obj2);if(propertyCountOfObj1>=0&&propertyCountOfObj2>=0){if(propertyCountOfObj1!==propertyCountOfObj2)return!1;const jsonObj1=FunctionUtils.convertToObj(obj1),jsonObj2=FunctionUtils.convertToObj(obj2);return lodash_isequal_1.default(jsonObj1,jsonObj2)}if(FunctionUtils.isNumber(obj1)&&FunctionUtils.isNumber(obj2)&&Math.abs(obj1-obj2)<Number.EPSILON)return!0;try{return obj1===obj2}catch(_a){return!1}}static buildTypeValidatorError(returnType,childExpr,expr){const names=Object.keys(returnType_1.ReturnType).filter(x=>!(parseInt(x)>=0)),types=[];for(const name of names){0!=(returnType&returnType_1.ReturnType[name])&&types.push(name)}if(1===types.length)return`${childExpr} is not a ${types[0]} expression in ${expr}.`;return`${childExpr} in ${expr} is not any of [${types.join(", ")}].`}static getPropertyCount(obj){let count=-1;return null==obj||Array.isArray(obj)||(obj instanceof Map?count=obj.size:"object"!=typeof obj||obj instanceof Date||(count=Object.keys(obj).length)),count}static convertToObj(instance){if(FunctionUtils.getPropertyCount(instance)>=0){return(instance instanceof Map?Array.from(instance.entries()):Object.entries(instance)).reduce((acc,[key,value])=>Object.assign({},acc,{[key]:FunctionUtils.convertToObj(value)}),{})}return Array.isArray(instance)?instance.map(item=>FunctionUtils.convertToObj(item)):instance}}FunctionUtils.DefaultDateTimeFormat="YYYY-MM-DDTHH:mm:ss.SSS[Z]",exports.FunctionUtils=FunctionUtils;

//# sourceMappingURL=data:application/json;base64,